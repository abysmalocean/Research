C     ******************************************************************
      SUBROUTINE DISTRIB(QDIST,IN,ID,DENSTY,NN,DN,SN,NA,DA,SA,
     $NC,DC,SC,M)
      DIMENSION QDIST(160)
      REAL ID,IN,IL,LD,NN,NA,NC,N1,N2,N3,N
      REAL MASS,MASS1
      D1=ALOG(DN)
      D2=ALOG(DA)
      D3=ALOG(DC)
      S1=ALOG(SN)
      S2=ALOG(SA)
      S3=ALOG(SC)
      SPI=2.5066
      DL=ALOG(10.)/ID
      IL=ALOG(.01)-INT(1.2/DL)*DL
      DJ=DL/5.
      CJ=DJ/SPI
      C1=CJ*NN/S1
      C2=CJ*NA/S2
      C3=CJ*NC/S3
      LD=IL+DL
      D=IL+DJ/2.
      DO 1 I=1,M
      N1=0
      N2=0
      N3=0
      N=0
      MASS=0
      QDIST(I)=0.
      DO 2 J=1,5
      N1=C1*EXP(-.5*((D-D1)/S1)**2)
      N2=C2*EXP(-.5*((D-D2)/S2)**2)
      N3=C3*EXP(-.5*((D-D3)/S3)**2)
      N=N+N1+N2+N3
      MASS1=(N1+N2+N3)*.5236*DENSTY*((EXP(D))**3)*.000000000001
      QDIST(I)=QDIST(I)+MASS1
    2 D=D+DJ
    1 CONTINUE
      RETURN
      END
C
C
C
      SUBROUTINE PRAERO(Q,DEPSIT,DIAM,TIME,VOLUME,M,KCOMP,IFLAG,IPRNT,
     $IPLOT,QMINPL,QMAXPL,ISCAL,NROW,NCOL,DPI,DENSITY)
C
C      THIS ROUTINE PRINTS THE RESULTS AFTER EACH TIME STEP
C
      COMMON/FLAG/IFGGRAV,IFGTURB,IFGDPST
      DIMENSION Q(1),QT(20),QTN(20),DEPSIT(3,1),DIAM(1),CUMDEP(8),V(21)
      DIMENSION DPI(20)
C
      IF(IFLAG.NE.1)GO TO 15
      CUMTOT=0.
      DO 17 I=1,KCOMP
   17 CUMDEP(I)=0.
C
   15 SUM=0.
      DO 12 I=1,M
      QT(I)=0.
      DO 16 J=1,KCOMP
   16 QT(I)=QT(I)+Q(J+KCOMP*(I-1))
   12 SUM=SUM+QT(I)
C
C **************************************************************
C THIS SECTION OF CODE REPLACED 3/27/84 BY MIKE PIPHO BECAUSE
C IT DOES NOT APPEAR TO GIVE CORRECT ANSWERS FOR NUMBER DISTRIBUTION
C
      MP1=M+1
      DO 18 I=1,MP1
      V(I)=0.
   18 CALL RHODD(V(I),DIAM(I),RHO)
      SUMNUM=0.
      DO 25 I=1,M
      QTN(I)=QT(I)*(1./V(I)-1./V(I+1))/ALOG(V(I+1)/V(I))
C *****************************************************************
C
C  REPLACEMENT CODE CALCULATES THE NUMBER DISTRIBUTION ASSUMING
C  A LOG NORMAL MASS DISTRIBUTION
C
C     SUMNUM=0.
C     DO 25 I=1,M
C     QTN(I)=QT(I)/(3.14159265*DPI(I)**3/6.0*DENSITY)
C
C  END OF NEW CODE
C
      V(I)=QT(I)*VOLUME
   25 SUMNUM=SUMNUM+QTN(I)
      SUMV=SUM*VOLUME
C
      WRITE(IPRNT,10)TIME,(DIAM(I),DIAM(I+1),QT(I),QTN(I),V(I),I=1,M)
   10 FORMAT(1H1,52X,'TIME =',E10.4,' SECONDS'/34X,'DIAMETER RANGE (M)',
     $6X,'KG/M**3',5X,'NUMBER/M**3',5X,'KG'/(30X,E10.4,' --',E10.4,
     $3E13.4))
      WRITE(IPRNT,26)SUM,SUMNUM,SUMV
   26 FORMAT(/40X,'TOTAL',8X,3E13.4)
C
      DO 21 I=1,M
   21 QTN(I)=QT(I)
C
      IF(KCOMP.EQ.1) GO TO 110
      WRITE(IPRNT,1)
    1 FORMAT(/52X,'COMPONENT (KG/M**3)'/5X,'DIAMETER RANGE (M)',
     $  11X,'1',12X,'2',12X,'3',12X,'4',12X,'5',12X,'6',12X,'7',12X,'8')
      DO 22 I=1,M
   22 WRITE(IPRNT,19)DIAM(I),DIAM(I+1),(Q(J+KCOMP*(I-1)),J=1,KCOMP)
   19 FORMAT(E11.4,' --',E10.4,2X,8E13.4)
C
      DO 33 I=1,KCOMP
      QT(I)=0.
      DO 33 L=1,M
   33 QT(I)=QT(I)+Q(I+KCOMP*(L-1))
      WRITE(IPRNT,34)(QT(I),I=1,KCOMP)
   34 FORMAT(/50X,'TOTAL OF EACH COMPONENT (KG/M**3)'/26X,8E13.4)
      DO 14 K=1,KCOMP
   14 QT(K)=QT(K)*VOLUME
      WRITE(IPRNT,5)(QT(K),K=1,KCOMP)
    5 FORMAT(65X,'KG'/26X,8E13.4)
  110 IF(IFLAG.EQ.1.OR. IFGDPST.EQ.0)GO TO 23
C
      DO 3 K=1,KCOMP
      QT(K)=0.
      DO 3 J=1,3
    3 QT(K)=QT(K)+DEPSIT(J,K)
C
      TOTDEP=0.
      DO 6 K=1,KCOMP
    6 TOTDEP=TOTDEP+QT(K)
      CUMTOT=CUMTOT+TOTDEP
      WRITE(IPRNT,2)TOTDEP,CUMTOT
    2 FORMAT(/40X,'TOTAL DEPOSITED MASS =',E10.4,' KG',3X,
     $  'CUMULATIVE =',E10.4,' KG'/60X,'COMPONENT (KG)')
C
      WRITE(IPRNT,8)(DEPSIT(1,K),K=1,KCOMP)
    8 FORMAT(6X,'CEILING',12X,8E13.4)
      WRITE(IPRNT,9)(DEPSIT(2,K),K=1,KCOMP)
    9 FORMAT(6X,'VERTICAL WALLS',5X,8E13.4)
      WRITE(IPRNT,11)(DEPSIT(3,K),K=1,KCOMP)
   11 FORMAT(6X,'FLOOR',14X,8E13.4)
      WRITE(IPRNT,4)(QT(K),K=1,KCOMP)
    4 FORMAT(50X,'TOTAL DEPOSITED OF EACH COMPONENT (KG)'/25X,8E13.4)
C
      DO 13 K=1,KCOMP
   13 CUMDEP(K)=CUMDEP(K)+QT(K)
      WRITE(IPRNT,7)(CUMDEP(K),K=1,KCOMP)
    7 FORMAT(60X,'CUMULATIVE DEPOSITED (KG)'/25X,8E13.4)
C
   23 IF(ISCAL.EQ.0)RETURN
      CALL PPLOT(TIME,M,DIAM,QTN,QMINPL,QMAXPL,0,IPLOT,ISCAL,NROW,NCOL)
      IF(KCOMP.EQ.1)RETURN
      DO 20 K=1,KCOMP
      DO 24 I=1,M
   24 QTN(I)=Q(K+(I-1)*KCOMP)
   20 CALL PPLOT(TIME,M,DIAM,QTN,QMINPL,QMAXPL,K,IPLOT,ISCAL,NROW,NCOL)
C
      RETURN
      END
      SUBROUTINE PPLOT(TIME,M,DIAM,Q,QMINPL,QMAXPL,NUMPLT,IPLOT,ISCAL,
     $NROW,NCOL)
C
C     THIS ROUTINE PLOTS THE RESULTS AFTER EACH TIME STEP ON
C     LOGICAL UNIT NUMBER IPLOT
C
      CHARACTER MINUS,IBAR,IBLK,ICHAR,IX,NXLBL(7),NUMBER(10),LINPLT(101)
      DIMENSION NX(21),NY(20),DIAM(1),Q(1),QLABEL(50)
      DATA MINUS,IBAR,IBLK,IX/'-','!',' ','X'/
      DATA NXLBL/'S','E','C','T','I','O','N'/
      DATA NUMBER/'0','1','2','3','4','5','6','7','8','9'/
      IF(ISCAL.EQ.0.OR.IABS(ISCAL).GT.3)RETURN
      ISKIP=0
      IF(M.LE.20)GO TO 43
      WRITE(IPLOT,15)
   15 FORMAT('0--PLOTTING PERMITTED ONLY FOR A MAXIMUM OF 20 SECTIONS')
      ISKIP=1
C
   43 DO 46 I=1,M
      IF(DIAM(I).GT.0..AND.DIAM(I).LT.DIAM(I+1))GO TO 46
      ISKIP=1
   46 CONTINUE
      IF(ISKIP.EQ.1)WRITE(IPLOT,47)
   47 FORMAT('0--PARTICLE DIAMETERS MUST BE POSITIVE AND IN ASCENDING OR
     $DER')
C
      IF(QMINPL.LT.QMAXPL)GO TO 14
      WRITE(IPLOT,26)
   26 FORMAT('0--PLOTTING RANGE MUST BE POSITIVE')
      RETURN
   14 IF(ISKIP.EQ.1)RETURN
C
C     ADJUST PLOTTING SIZE FOR MINIMUM REQUIREMENTS
C
      ISCALE=ISCAL
      NR=NROW
      IF(NR.LT.13)NR=13
      IF(NR.GT.50)NR=50
      NC=NCOL
      IF(NCOL.LT.2*M+1)NC=2*M+1
      IF(NCOL.GT.101)NC=101
C
C     SCALE THE SECTION BOUNDARIES TO CORRESPOND TO THE LOGARITHM OF
C     THE PARTICLE DIAMETER
C
      MP1=M+1
      D1=ALOG(DIAM(1))
      D2=1./(ALOG(DIAM(MP1))-D1)
      NX(1)=1
      NX(MP1)=NC
      DO 1 I=2,M
    1 NX(I)=IFIX((0.01+ALOG(DIAM(I))-D1)*FLOAT(NC-1)*D2)+1
C
C     MAKE SURE THERE IS AT LEAST ONE COLUMN BETWEEN SECTION BOUNDARIES
C     AND THAT THE LAST SECTION FITS INSIDE THE PLOTTING AREA
C
      DO 36 I=2,MP1
      IF(NX(I).LE.NX(I-1)+1)NX(I)=NX(I-1)+2
   36 CONTINUE
      IF(NX(MP1).GT.NC.AND.NX(MP1).LE.101)NC=NX(MP1)
   23 IF(NX(MP1).LE.101)GO TO 27
C
C     IF NOT ENOUGH COLUMNS TO PLOT, SQUEEZE SECTIONS BY REMOVING ONE
C     COLUMN AT A TIME FROM ALL SECTIONS WITH MORE THAN ONE COLUMN
C
      DO 22 I=2,MP1
      IF(NX(I)-NX(I-1).GE.2)NX(I)=NX(I)-1
   22 CONTINUE
      GO TO 23
C
C     IF LOGARITHMIC SCALING IS REQUESTED, SWITCH TO LINEAR SCALING IF
C     ANY OF THE CONCENTRATIONS ARE ZERO
C
   27 IF(ISCALE.GT.0)GO TO 10
      IF(ISCALE.LE.-2.AND.QMINPL.LE.0.)GO TO 41
      DO 39 I=1,M
      IF(Q(I).LE.0.)GO TO 41
   39 CONTINUE
      DO 25 I=1,M
   25 Q(I)=ALOG(Q(I))
      GO TO 10
   41 ISCALE=-ISCALE
C
C     FIND THE LARGEST AND SMALLEST CONCENTRATIONS
C
   10 QMAX=Q(1)
      QMIN=Q(1)
      DO 17 I=2,M
      IF(Q(I).GT.QMAX)QMAX=Q(I)
      IF(Q(I).LT.QMIN)QMIN=Q(I)
   17 CONTINUE
C
      IF(QMAX.LE.QMAXPL.AND.QMIN.GE.QMINPL.OR.IABS(ISCALE).LE.2)GO TO 9
      DO 6 I=1,M
      IF(Q(I).LT.QMINPL.OR.Q(I).GT.QMAXPL)WRITE(IPLOT,7)I
    7 FORMAT(' CONCENTRATION IN SECTION',I3,' IS BEYOND THE USER SPECIFI
     $ED PLOTTING LIMITS')
    6 CONTINUE
C
    9 IF(IABS(ISCALE).EQ.3.OR.IABS(ISCALE).EQ.2.AND.QMIN.GE.QMINPL)
     $QMIN=QMINPL
      IF(IABS(ISCALE).EQ.3.OR.IABS(ISCALE).EQ.2.AND.QMAX.LE.QMAXPL)
     $QMAX=QMAXPL
C
C     DETERMINE Y AXIS LABELS
C
      DO 2 I=1,NR
    2 QLABEL(I)=QMAX-(QMAX-QMIN)*FLOAT(I-1)/FLOAT(NR-1)
C
C     IF LOGARITHMIC SCALING, EXPONENTIATE Y LABELS
C
      IF(ISCALE.GT.0)GO TO 21
      DO 24 I=1,NR
   24 QLABEL(I)=EXP(QLABEL(I))
C
C     COMPUTE Y AXIS (I.E. THE ROW) FOR EACH SECTION
C
   21 QDIF=QMAX-QMIN
      IF(QDIF.EQ.0.)QDIF=1.
      DO 3 I=1,M
    3 NY(I)=NR-IFIX(.01+(Q(I)-QMIN)*FLOAT(NR-1)/QDIF)
      WRITE(IPLOT,16)TIME
   16 FORMAT('1TIME =',E12.3,' SECONDS')
      IF(NUMPLT.EQ.0)WRITE(IPLOT,37)
   37 FORMAT(' TOTAL MASS CONCENTRATION')
      IF(NUMPLT.GT.0)WRITE(IPLOT,38)NUMPLT
   38 FORMAT(' MASS CONCENTRATION OF COMPONENT',I4)
      IF(ISCALE.GT.0)WRITE(IPLOT,29)
   29 FORMAT(' LINEARLY SCALED Y AXIS'/)
      IF(ISCALE.LT.0)WRITE(IPLOT,28)
   28 FORMAT(' LOGARITHMICALLY SCALED Y AXIS'/)
C
C     SET UP CHARACTERS FOR PLOTTING
C
      DO 20 I=1,NC
   20 LINPLT(I)=IBLK
C
C     PRINT ONE LINE AT A TIME. IF NY(I)=ILINE, THEN FILL THE
C     CHARACTERS IN SECTION I WITH MINUS SIGNS
C
      DO 4 ILINE=1,NR
C
      DO 5 I=1,M
      ICHAR=IBLK
      IF(NY(I).EQ.ILINE)ICHAR=MINUS
      JSTRT=NX(I)+1
      JFNSH=NX(I+1)-1
      DO 8 J=JSTRT,JFNSH
    8 LINPLT(J)=ICHAR
C
C      TURN ON BAR CHARACTERS AT SECTION BOUNDARIES WHEN A
C      SECTION CONCENTRATION IS PRINTED
C
      IF(NY(I).NE.ILINE)GO TO 5
      LINPLT(JSTRT-1)=IBAR
      LINPLT(JFNSH+1)=IBAR
    5 CONTINUE
C
      IF(ILINE.NE.(NR+1)/2)GO TO 12
      WRITE(IPLOT,13)QLABEL(ILINE),(LINPLT(I),I=1,NC)
   13 FORMAT(' KG/M**3',E9.2,1X,101A1)
      GO TO 4
   12 WRITE(IPLOT,11)QLABEL(ILINE),(LINPLT(I),I=1,NC)
   11 FORMAT(8X,E9.2,1X,101A1)
    4 CONTINUE
C
C      PRINT LAST LINE OF PLOT BY PLACING AN X AT THE SECTION BOUNDARIES
C      AND A MINUS SIGN BETWEEN SECTION BOUNDARIES
C
      DO 19 I=1,NC
   19 LINPLT(I)=MINUS
      DO 18 I=1,MP1
      ISPOT=NX(I)
   18 LINPLT(ISPOT)=IX
      WRITE(IPLOT,32)(LINPLT(I),I=1,NC)
C
      DO 30 I=1,NC
   30 LINPLT(I)=IBLK
      MIN=MIN0(M,9)
      DO 31 I=1,MIN
      ISPOT=NX(I)+(NX(I+1)-NX(I))/2
   31 LINPLT(ISPOT)=NUMBER(I+1)
C
      IF(M.LT.10)GO TO 42
      DO 40 J=1,9
      JSTRT=10*J
      IF(M.LT.JSTRT)GO TO 42
      JFNSH=JSTRT+9
      MIN=MIN0(JFNSH,M)
      DO 40 I=JSTRT,MIN
      ISPOT=NX(I)+(NX(I+1)-NX(I))/2
      LINPLT(ISPOT)=NUMBER(J+1)
   40 LINPLT(ISPOT+1)=NUMBER(I-JSTRT+1)
   42 WRITE(IPLOT,32)(LINPLT(I),I=1,NC)
   32 FORMAT(18X,101A1)
C
C     CENTER AND PRINT THE WORD 'SECTION'
C
      DO 34 I=1,NC
   34 LINPLT(I)=IBLK
      ISPOT=(1+NX(MP1))/2-2
      ISPOT6=ISPOT+6
      DO 33 I=ISPOT,ISPOT6
   33 LINPLT(I)=NXLBL(I-ISPOT+1)
      WRITE(IPLOT,32)(LINPLT(I),I=1,NC)
      RETURN
      END
      SUBROUTINE MAEROS(M,KCOMP,TIME,DELTIM,Q,SRATE,TGAS,PGAS,DEPSIT,
     $  DIAM,TGAS1,TGAS2,PGAS1,PGAS2,ROUND,IPRNT,IFLAG,NEWCOF)
C
C     THIS ROUTINE IS THE DRIVER FOR THE MULTICOMPONENT
C     AEROSOL MODULE.  IF NECESSARY, COEFFICIENTS ARE
C     RECALCULATED AS SPECIFIED BY NEWCOF.  THE MASS OF
C     EACH COMPONENT DEPOSITED IS ALSO CALCULATED BY
C     USING A MASS BALANCE TO DETERMINE THE MASS REMOVED
C     FROM THE AEROSOL AND PARTITIONING THAT MASS TO THE
C     THREE DEPOSITION SURFACES BASED ON THE RELATIVE
C     REMOVAL RATES ON THE SURFACES AVERAGED OVER THE
C     TIME STEP. THIS CODE WAS WRITTEN BY FRED GELBARD.
C                     MAY 8, 1982
C
C              VARIABLES
C
C    ABSER=ABSOLUTE ERROR FOR RKF45 ROUTINE
C    ACELOV=AREA OF CEILING OVER CHAMBER VOLUME (1/M)
C    AFLROV=AREA OF FLOOR OVER CHAMBER VOLUME (1/M)
C    AKN=KNUDSEN NUMBER OF PARTICLE
C    AWALOV=AREA OF WALL OVER CHAMBER VOLUME (1/M)
C    BMOBLX=PARTICLE MOBILITY
C    CHI=DYNAMIC SHAPE FACTOR
C    COEFAV=COEFFICIENT ARRAY STORED IN THE FOLLOWING ORDER
C           BETA(SUPER-1B)
C           BETA(SUPER-2A)
C           BETA(SUPER-2B)
C           BETA(SUPER-3)
C           BETA(SUPER-4)
C           DEPOSITION COEFFICIENTS
C           CONDENSATION COEFFICIENTS
C    COLEFF=COLLISION EFFICIENCY
C    CT1P1=ARRAY OF NUMCOF SECTIONAL COEFFICIENTS AT A TEMPERATURE
C          OF TGAS1 AND PRESSURE OF PGAS1
C    CT1P2=ARRAY OF NUMCOF SECTIONAL COEFFICIENTS AT A TEMPERATURE
C          OF TGAS1 AND PRESSURE OF PGAS2
C    CT2P1=ARRAY OF NUMCOF SECTIONAL COEFFICIENTS AT A TEMPERATURE
C          OF TGAS2 AND PRESSURE PGAS1
C    CT2P2=ARRAY OF NUMCOF SECTIONAL COEFFICIENTS AT A TEMPERATURE
C          OF TGAS2 AND PRESSURE PGAS2
C    DELDIF=DIFFUSION BOUNDARY LAYER THICKNESS (M)
C    DELSAT=SATURATION RATIO MINUS ONE
C    DELTIM=TIME STEP (SEC)
C    DENAIR=DENSITY OF AIR (KG/M**3)
C    DENSTY=PARTICLE MATERIAL DENSITY (KG/M**3)
C    DEPSIT(J,K)=MASS OF K-TH COMPONENT (KG), DEPOSITED ON J-TH
C      DEPOSITION SURFACE
C    DIAM(I)=ARRAY OF PARTICLE DIAMETERS AT SECTION BOUNDARIES (M)
C    FREEMN=MEAN FREE PATH OF GAS (M)
C    FSLIP=PARTICLE SLIP COEFFICIENT
C    GAMMA=AGGLOMERATION SHAPE FACTOR
C    ICONDN=CONDENSATION FLAG (0=NO/1=YES)
C    IFLAG=FLAG FOR RKF45 ROUTINE, SET INITALLY TO 1
C          SET TO -1 TO RESTART TIME INTEGRATION
C    IPLOT=LOGICAL UNIT NUMBER FOR PRINTER PLOTS
C    IPRNT=PRINTER LOGICAL UNIT NUMBER
C    ISCAL=USER REQUESTED Y AXIS SCALING. IF AUTOMATIC, IGNORE QMINPL
C       AND QMAXPL, AND SCALE TO FIT DATA ON PLOT AUTOMATICALLY. IF
C       USER SCALING IS REQUESTED, QMINPL AND QMAXPL WILL BE USED TO
C       DEFINE THE LOWER AND UPPER BOUNDS OF THE Y AXIS, RESPECTIVELY.
C         -3 USER LOG SCALING
C         -2 USER (OR IF NOT POSSIBLE AUTOMATIC) LOG SCALING
C         -1 AUTOMATIC LOG SCALING
C          0 NO PLOTS ARE TO BE PRINTED
C          1 AUTOMATIC LINEAR SCALING
C          2 USER (OR IF NOT POSSIBLE AUTOMATIC) LINEAR SCALING
C          3 USER LINEAR SCALING
C    ISCALE=ACTUAL VALUE OF ISCAL USED FOR Y AXIS
C    KCOMP=NUMBER OF COMPONENTS
C    LINPLT=ARRAY OF LINE PRINTING CHARACTERS FOR PLOTTING
C    M=NUMBER OF SECTIONS
C    NB2A=NUMBER OF COEFFICIENTS BEFORE BETA(SUPER-2A)
C    NB2B=NUMBER OF COEFFICIENTS BEFORE BETA(SUPER-2B)
C    NB3=NUMBER OF COEFFICIENTS BEFORE BETA(SUPER-3)
C    NB4=NUMBER OF COEFFICIENTS BEFORE BETA(SUPER-4)
C    NC=ACTUAL NUMBER OF COLUMNS FOR PLOT
C    NCOL=USER REQUEST FOR NUMBER OF COLUMNS FOR PLOT
C    NR=ACTUAL NUMBER OF ROWS FOR PLOT
C    NROW=USER REQUEST FOR NUMBER OF ROWS FOR PLOT
C    NEWCOF=SET TO FOLLOWING TO CALCULATE COEFFICIENTS. PROGRAM,
C           WILL CHANGE SIGN FOR SUBSEQUENT CALLS. A NEGATIVE VALUE
C           INDICATES THAT EXISTING COEFFICIENTS ARE TO BE USED.
C             1 INTERPOLATE TEMPERATURE AND PRESSURE
C             2 ONLY USE TGAS1 AND PGAS1
C             3 INTERPOLATE ONLY TEMPERATURE (USE PGAS1)
C             4 INTERPOLATE ONLY PRESSURE (USE TGAS1)
C             5 SAME AS 1 EXCEPT RECALCULATE ONLY DEPOSITION
C                   COEFFICIENTS
C             6 SAME AS 1 EXCEPT RECALCULATE ONLY CONDENSATION
C                 COEFFICIENTS
C             7 SAME AS 1 EXCEPT RECALCULATE ONLY DEPOSITION
C                 AND CONDENSATION COEFFICIENTS
C             8 MODIFY CONDENSATION COEFFICIENTS BY MULTIPLYING BY
C                 DELSAT TO RESCALE ONLY CONDENSATION COEFFICIENTS
C             9 RECALCULATE ONLY CONDENSATION COEFFICIENTS FOR
C                 TGAS1 AND PGAS1
C            11 SAME AS 1 EXCEPT NO CONDENSATION
C            12 SAME AS 2 EXCEPT NO CONDENSATION
C            13 SAME AS 3 EXCEPT NO CONDENSATION
C            14 SAME AS 4 EXCEPT NO CONDENSATION
C            15 SAME AS 5 EXCEPT NO CONDENSATION
C    NDEPST=NUMBER OF COEFFICIENTS BEFORE DEPOSITION COEFFICIENTS
C    NGROW=NUMBER OF COEFFICIENTS BEFORE CONDENSATIONAL GROWTH
C          COEFFICIENTS
C    NUMCOF=TOTAL NUMBER OF COEFFICIENTS AT A GIVEN TEMPERATURE AND
C           PRESSURE (AT MOST EQUAL TO 2*M**2 + 4*M)
C    NX=ARRAY OF CHARACTER POSITIONS OF SECTION BOUNDARIES
C    NY=ARRAY OF CHARACTER POSITIONS OF SECTION CONCENTRATIONS FOR
C       PLOTTING.  NY(I) IS THE NUMBER OF ROWS FROM THE TOP OF THE
C       PLOT FOR SECTION I
C    PGAS=GAS PRESSURE (N/M**2)
C    PGAS1=LOWEST GAS PRESSURE (MUST BE LESS THAN PGAS2) (N/M**2)
C    PGAS2=HIGHEST GAS PRESSURE (N/M**2)
C    PSRATE=ARRAY TO  PASS SRATE IN COMMON BLOCK
C    PSAT=SATURATION PRESSURE OF CONDENSED MATERIAL (N/M**2)
C    Q(I)=ARRAY OF SUSPENDED MASS CONCENTRATIONS (KG/M**3),
C      WHERE THE FIRST KCOMP ELEMENTS ARE FOR THE FIRST SECTION
C      THE SECOND KCOMP ELEMENTS ARE FOR THE SECOND SECTION, ETC.
C    QLABEL=ARRAY OF CONENTRATIONS FOR LABELING Y AXIS OF PLOT
C    QMAXPL=MAXIMUM CONCENTRATION OF A SECTION IN KG/M**3 WHICH IS
C           TO BE PLOTTED
C    QMINPL=MINIMUM CONCENTRATION OF A SECTION IN KG/M**3 WHICH IS
C           TO BE PLOTTED
C    REL=RELATIVE ERROR FOR RKF45 ROUTINE
C    ROUND=MACHINE ROUND-OFF ERROR (I.E. SMALLEST NUMBER ADDED TO ONE
C          WHICH IS GREATER THAN ONE)
C           MACHINES                  VALUES FOR ROUND
C           DG ECLIPSE                   1.2E-7
C           IBM 360/370                  9.6E-7
C           DEC 10                       7.7E-9
C           DEC VAX                      6.0E-8
C           CDC 6600/7600                7.7E-15
C           UNIVAC 1108                  1.5E-8
C    SRATE(I)=CONCENRATION GENERATION RATE OF K-TH COMPONENT
C      IN L-TH SECTION STORED IN I=K+(L-1)*KCOMP. (KG/S/M**3)
C    STICK=PARTICLE STICKING COEFFICIENT
C    TGAS=GAS TEMPERATURE (DEG K)
C    TGAS1=LOWEST GAS TEMPERATURE (MUST BE LESS THAN TGAS2) (DEG K)
C    TGAS2=HIGHEST GAS TEMPERATURE (DEG K)
C    TGRADC=TEMPERATURE GRADIENT TO CEILING (DEG K/M)
C    TGRADF=TEMPERATURE GRADIENT TO FLOOR (DEG K/M)
C    TGRADW=TEMPERATURE GRADIENT TO WALL (DEG K/M)
C    TIME=CURRENT TIME (SEC)
C    TKGOP=THERMAL CONDUCTIVITY OF GAS/PARTICLE
C    TURBDS=TURBULENCE DISSIPATION RATE (M**2/SEC**3)
C    VTERM=GRAVITATIONAL TERMINAL VELOCITY (M/SEC)
C    VTHRML=THERMAL DEPOSITION VELOCITY (M/SEC)
C    VISCOS=VISCOSITY OF AIR (KG/M/SEC)
C    VOLUME=CHAMBER VOLUME (M**3)
C    V=PARTICLE MASS (KG)
C    V(I)=ARRAY OF PARTICLE MASSES AT SECTION BOUNDARIES (KG)
C    WTCONM=MASS OF CONDENSING MOLECULE (KG)
C    WTMOL=MOLECULAR WEIGHT OF GAS (KG/KG-MOLE)
C
      DIMENSION Q(160),SRATE(160),WORK(963),IWORK(5),DEPSIT(3,1),
     $  QTSTRT(8),QTFNSH(8),DIAM(1),V(21)
      COMMON/AVGCOF/COEFAV(880),PSRATE(160),MPASS,KPASS,NB2A,NB2B,NB3,
     $  NB4,NDEPST,NGROW,ICONDN
      COMMON/PHYSPT/ACELOV,AFLROV,AWALOV,CHI,DELDIF,DELSAT,DENSTY,FSLIP,
     $FTHERM,GAMMA,PSAT,STICK,TGRADC,TGRADF,TGRADW,TKGOP,TURBDS,VOLUME,
     $WTCONM,WTMOL
      COMMON/DBLK/CT1P1(880),CT1P2(880),CT2P1(880),CT2P2(880)
      EXTERNAL DIFFUN
C
      CALL CHECK(M,KCOMP,TIME,DELTIM,Q,SRATE,TGAS,PGAS,DEPSIT,DIAM,
     $TGAS1,TGAS2,PGAS1,PGAS2,ROUND,IPRNT,IFLAG,NEWCOF)
C
      IF(IFLAG.EQ.1.OR.IFLAG.EQ.2.OR.IFLAG.EQ.-1)GO TO 30
      WRITE(IPRNT,31)IFLAG,TIME
   31 FORMAT(' RKF45 ERROR',I5,'  AT TIME =',E15.4)
      STOP
C
   30 MKCOMP=M*KCOMP
      DO 28 I=1,MKCOMP
   28 PSRATE(I)=SRATE(I)
C
C        SET THE CONDENSATION FLAG
C
      ICONDN=1
      IF(IABS(NEWCOF).GE.11)ICONDN=0
      IF(IFLAG.NE.-1)GO TO 32
      IFLAG=1
      GO TO 18
   32 IF(IFLAG.LT.0)GO TO 18
C
      MPASS=M
      KPASS=KCOMP
C
C      SET POINTERS TO COEFFICIENT ARRAY
C
      NB2A=((M-2)*(M-1))/2
      NB2B=((M-1)*M)/2+NB2A
      NB3=NB2B+((M-1)*M)/2
      NB4=NB3+M
      NDEPST=NB4+((M-1)*M)/2
      NGROW=NDEPST+3*M
      NUMCOF=NGROW+ICONDN*(3*M-1)
C
C       DETERMINE SECTION BOUNDARIES
C
      MP1=M+1
      DO 20 I=1,MP1
      V(I)=0.
   20 CALL RHODD(V(I),DIAM(I),RHO)
C
C       COMPUTE COEFFICIENTS AS SPECIFIED BY NEWCOF
C
   18 IF(NEWCOF.LT.0.OR.NEWCOF.EQ.8)GO TO 1
      ISTART=1
      IF(NEWCOF.EQ.5.OR.NEWCOF.EQ.7.OR.NEWCOF.EQ.15)ISTART=NDEPST+1
      IF(NEWCOF.EQ.6.OR.NEWCOF.EQ.9)ISTART=NGROW+1
      IFNSH=NUMCOF
      IF(NEWCOF.EQ.5.OR.NEWCOF.GE.11)IFNSH=NGROW
C
      CALL COEF(NEWCOF,M,TGAS1,PGAS1,V,ROUND,IPRNT)
      DO 2 I=ISTART,IFNSH
    2 CT1P1(I)=COEFAV(I)
      IF(NEWCOF.EQ.2.OR.NEWCOF.EQ.12.OR.NEWCOF.EQ.9)GO TO 1
      IF(NEWCOF.EQ.4.OR.NEWCOF.EQ.14)GO TO 19
C
      CALL COEF(NEWCOF,M,TGAS2,PGAS1,V,ROUND,IPRNT)
      DO 5 I=ISTART,IFNSH
    5 CT2P1(I)=COEFAV(I)
      IF(NEWCOF.EQ.3.OR.NEWCOF.EQ.13)GO TO 1
C
   19 CALL COEF(NEWCOF,M,TGAS1,PGAS2,V,ROUND,IPRNT)
      DO 9 I=ISTART,IFNSH
    9 CT1P2(I)=COEFAV(I)
      IF(NEWCOF.EQ.4.OR.NEWCOF.EQ.14)GO TO 1
C
      CALL COEF(NEWCOF,M,TGAS2,PGAS2,V,ROUND,IPRNT)
      DO 15 I=ISTART,IFNSH
   15 CT2P2(I)=COEFAV(I)
C
C     BASED ON AVAILABLE COEFFICIENTS, USE A LINEAR INTERPOLATION
C     IN TEMPERATURE AND PRESSURE TO DETERMINE THE AVERAGE
C     COEFFICIENT TO BE USED, I.E. COEFAV
C
    1 ALPHA=(TGAS-TGAS1)/(TGAS2-TGAS1)
      ZI=(PGAS-PGAS1)/(PGAS2-PGAS1)
      DO 4 I=1,NUMCOF
    4 COEFAV(I)=(1.-ALPHA)*((1.-ZI)*CT1P1(I)+ZI*CT1P2(I))+
     $  ALPHA*((1.-ZI)*CT2P1(I)+ZI*CT2P2(I))
C
      IF(NEWCOF.NE.8)GO TO 24
      ISTART=NGROW+1
      DO 25 I=ISTART,NUMCOF
   25 COEFAV(I)=DELSAT*COEFAV(I)
   24 NEWCOF=-IABS(NEWCOF)
C
C     STORE THE INITIAL DEPOSITION RATES (IN KG/SEC) OF THE K-TH
C     COMPONENT ON THE J-TH DEPOSITION SURFACE IN DEPSIT(J,K)
C
      DO 10 J=1,3
      DO 10 K=1,KCOMP
      DEPSIT(J,K)=0.
      DO 10 L=1,M
   10 DEPSIT(J,K)=DEPSIT(J,K)+COEFAV(3*(L-1)+NDEPST+J)*Q(K+(L-1)*KCOMP)
C
C     STORE THE AEROSOL RELEASED OVER THE TIME STEP (IN KG), AND THE
C     INITIAL SUSPENDED MASS OF THE K-TH COMPONENT IN QTSTRT(K)
C
      DO 6 K=1,KCOMP
      SORSK=0.
      QTSTRT(K)=0.
      DO 7 L=1,M
      SORSK=SORSK+SRATE((L-1)*KCOMP+K)
    7 QTSTRT(K)=QTSTRT(K)+Q((L-1)*KCOMP+K)
    6 QTSTRT(K)=(QTSTRT(K)+SORSK*DELTIM)*VOLUME
C
      IF(ICONDN.EQ.0)GO TO 3
C
C     STORE THE INITIAL CONDENSATION RATE (IN KG/SEC) OF THE LAST
C     COMPONENT IN CONDNS
C
      CONDNS=0.
      DO 16 L=1,M
      SUM=0.
      DO 17 K=1,KCOMP
   17 SUM=SUM+Q(KCOMP*(L-1)+K)
   16 CONDNS=CONDNS+SUM*COEFAV(NGROW+L)
C
C     CALL THE RKF45 PACKAGE TO TAKE A TIME STEP
C
    3 ABSE=1.E-20
      REL=.001
      TOUT=TIME+DELTIM
      CALL RKF45(DIFFUN,MKCOMP,Q,TIME,TOUT,REL,ABSE,IFLAG,WORK,IWORK,
     $ROUND)
C
C     IF THE CONCENTRATION OF A COMPONENT GOES NEGATIVE, SET IT TO
C     ZERO AND RESET IFLAG TO -1 TO RESTART TIME INTEGRATION
C
      IF(IFLAG.NE.2)GO TO 33
      DO 26 I=1,MKCOMP
      IF(Q(I).GE.0.)GO TO 26
      IFLAG=-1
      Q(I)=0.
   26 CONTINUE
   33 IF(ICONDN.EQ.0)GO TO 21
C
C     ADD THE FINAL CONDENSATION RATE (IN KG/SEC) OF THE LAST
C     COMPONENT TO THE INITIAL CONDENSATION RATE AND DIVIDE BY 2
C     TO OBTAIN THE AVERAGE CONDENSATION RATE OVER THE TIME STEP.
C     ADD THE CALCULATED AVERAGE CONDENSATION RATE TO QTSTRT(KCOMP)
C     TO OBTAIN THE TOTAL FORMATION RATE OF THE LAST COMPONENT IN
C     THE AEROSOL PHASE.
C
      DO 22 L=1,M
      SUM=0.
      DO 23 K=1,KCOMP
   23 SUM=SUM+Q(KCOMP*(L-1)+K)
   22 CONDNS=CONDNS+SUM*COEFAV(NGROW+L)
      QTSTRT(KCOMP)=QTSTRT(KCOMP)+.5*CONDNS*VOLUME*DELTIM
C
C     SUBTRACT THE FINAL SUSPENDED MASS FROM THE INITIAL, ADDED AND
C     CONDENSED MASS OF THE K-TH COMPONENT AND STORE THAT IN
C     QTFNSH(K).  THEREFORE, BY A MASS BALANCE, QTFNSH(K) IS THE
C     DEPOSITED MASS OF THE K-TH COMPONENT FOR THE TIME STEP
C
   21 DO 14 K=1,KCOMP
      QTFNSH(K)=0.
      DO 8 L=1,M
    8 QTFNSH(K)=QTFNSH(K)+Q((L-1)*KCOMP+K)
      QTFNSH(K)=QTSTRT(K)-QTFNSH(K)*VOLUME
      IF(QTFNSH(K).LT.0.)QTFNSH(K)=0.
   14 CONTINUE
C
C     ADD THE FINAL DEPOSITION RATE ON THE J-TH DEPOSITION SURFACE
C     FOR THE K-TH COMPONENT TO DEPSIT(J,K) AND DIVIDE BY 2 TO
C     OBTAIN THE AVERAGE DEPOSITION RATE OF THE K-TH COMPONENT ON
C     ALL THREE DEPOSITION SURFACES IN QTSTRT(K)
C
      DO 12 K=1,KCOMP
      QTSTRT(K)=0.
      DO 12 J=1,3
      DO 11 L=1,M
   11 DEPSIT(J,K)=DEPSIT(J,K)+COEFAV(3*(L-1)+NDEPST+J)*Q(K+(L-1)*KCOMP)
      DEPSIT(J,K)=0.5*DEPSIT(J,K)
   12 QTSTRT(K)=QTSTRT(K)+DEPSIT(J,K)
C
C     COMPUTE THE MASS DEPOSITED OF THE K-TH COMPONENT ON THE J-TH
C     SURFACE BY PARTITIONING THE TOTAL MASS DEPOSITED OF THE K-TH
C     COMPONENT (I.E. QTFNSH(K)), BASED ON THE WEIGHTED AVERAGE
C     DEPOSITION RATE (I.E. DEPSIT(J,K)/QTSTRT(K))
C
      DO 13 K=1,KCOMP
      RATIO=0.
      IF(QTSTRT(K).GT.0.)RATIO=QTFNSH(K)/QTSTRT(K)
      DO 13 J=1,3
   13 DEPSIT(J,K)=DEPSIT(J,K)*RATIO
C
      IF(IFLAG.EQ.2.OR.IFLAG.EQ.-1)RETURN
      WRITE(IPRNT,27)IFLAG,TIME
   27 FORMAT(//' RKF45 ERROR NUMBER',I4,3X,'SEE MANUAL SAND77-1441'/
     $  3X,'TIME REACHED WHEN ERROR OCCURED =',E11.4//)
      WRITE(IPRNT,29)(Q(I),I=1,MKCOMP)
   29 FORMAT(' VALUES OF Q ARRAY'/(6E15.4))
      RETURN
      END
      SUBROUTINE COEF(NEWCOF,M,TGAS,PGAS,V,ROUND,IPRNT)
C
C     THIS ROUTINE CALCULATES THE SECTIONAL COEFFICIENTS
C
      DIMENSION V(21),X(21),DEL(20)
      COMMON/AVGCOF/COEFAV(880),SRATE(160),MPASS,KPASS,NB2A,NB2B,NB3,
     $  NB4,NDEPST,NGROW,ICONDN
      COMMON/PHYSPT/ACELOV,AFLROV,AWALOV,CHI,DELDIF,DELSAT,DENSTY,FSLIP,
     $FTHERM,GAMMA,PSAT,STICK,TGRADC,TGRADF,TGRADW,TKGOP,TURBDS,VOLUME,
     $WTCONM,WTMOL
      EXTERNAL BETCAL,DEPOST,GROWTH
C
      MM1=M-1
      MP1=M+1
      DO 10 I=1,MP1
   10 X(I)=ALOG(V(I))
C
      DO 2 L=1,M
    2 DEL(L)=X(L+1)-X(L)
      REL=5.E-3
      ABSER=1.E-20
      IF(NEWCOF.EQ.5.OR.NEWCOF.EQ.7.OR.NEWCOF.EQ.15)GO TO 5
      IF(NEWCOF.EQ.6.OR.NEWCOF.EQ.9)GO TO 6
C
C     NBTYPE = TYPE OF COEFFICIENT CALCULATED
C     INNER  = 0 INNER LIMITS OF INTEGRATION ARE CONSTANT
C              1 CHANGE LOWER INNER LIMIT OF INTEGRATION TO
C                 ALOG(BASESZ-OUTER INTEGRATION VARIABLE). IN THIS
C                 CASE FIXSZ IS THE INNER UPPER LIMIT OF INTEGRATION.
C              2 CHANGE UPPER INNER LIMIT OF INTEGRATION TO
C                 ALOG(BASESZ-OUTER INTEGRATION VARIABLE). IN THIS
C                 CASE FIXSZ IS THE INNER LOWER LIMIT OF INTEGRATION.
C
C
C       CALCULATE BETA(SUPER-1B,SUB-I,L-1,L)
C       STORE WITH I VARYING FIRST FROM 1 TO L-2
C
      NBTYPE=1
      INNER=1
      DO 13 L=3,M
      LM2=L-2
      LIBEF=(LM2*(L-3))/2
      DO 13 I=1,LM2
      IER=1
      BASESZ=V(L)
      FIXSZ=X(L)
      CALL GAUSBT(BETCAL,X(I),X(I+1),REL,ABSER,ROUND,ANS,IER,IPRNT,
     $FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
   13 COEFAV(I+LIBEF)=ANS/(DEL(I)*(X(L)-X(L-1)))
C
C       CALCULATE BETA(SUPER-2A,SUB-I,L) AND BETA(SUPER-2B,SUB-I,L)
C       STORE WITH I VARYING FIRST FROM 1 TO L-1
C
      DO 14 L=2,M
      LM1=L-1
      LIBEF=(LM1*(L-2))/2
      DO 14 I=1,LM1
      NBTYPE=2
      IER=1
      INNER=1
      BASESZ=V(L+1)
      FIXSZ=X(L+1)
      CALL GAUSBT(BETCAL,X(I),X(I+1),REL,ABSER,ROUND,ANS,IER,IPRNT,
     $ FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
      COEFAV(NB2A+I+LIBEF)=ANS/(DEL(I)*DEL(L))
      NBTYPE=3
      IER=1
      INNER=2
      BASESZ=V(L+1)
      FIXSZ=X(L)
      CALL GAUSBT(BETCAL,X(I),X(I+1),REL,ABSER,ROUND,ANS,IER,IPRNT,
     $ FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
   14 COEFAV(NB2B+I+LIBEF)=ANS/(DEL(I)*DEL(L))
C
C     CALCULATE BETA(SUPER-3,SUB-L,L) IN THREE PARTS
C
      DO 15 L=1,M
      LP1=L+1
      NBTYPE=4
      IER=1
      INNER=1
      REL=1.E-2
      BASESZ=V(LP1)
      FIXSZ=X(LP1)
      ALV=ALOG(.5*V(LP1))
      CALL GAUSBT(BETCAL,X(L),ALV,REL,ABSER,ROUND,ANS,IER,IPRNT,
     $ FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
C
      IER=1
      COEFAV(NB3+L)=ANS
      NBTYPE=4
      INNER=1
      ALV2=ALOG(V(LP1)-V(L))
      BASESZ=V(LP1)
      FIXSZ=X(LP1)
      CALL GAUSBT(BETCAL,ALV,ALV2,REL,ABSER,ROUND,ANS,IER,IPRNT,
     $ FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
      COEFAV(NB3+L)=ANS+COEFAV(NB3+L)
C
      IER=1
      NBTYPE=5
      INNER=0
      BASESZ=X(L)
      FIXSZ=X(LP1)
      CALL GAUSBT(BETCAL,ALV2,X(LP1),REL,ABSER,ROUND,ANS,IER,
     $ IPRNT,FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      ANS=ANS+COEFAV(NB3+L)
      IF(IER.NE.0)GO TO 31
   15 COEFAV(NB3+L)=.5*ANS/DEL(L)**2
C
C     DETERMINE THE SECTIONAL COAGULATION COEFFICIENTS FOR
C     SCAVENGING OF PARTICLES IN SECTION L BY THOSE IN SECTION I
C     I.E. BETA(SUPER-4,SUB-I,L)
C     STORE WITH I VARYING FIRST FROM L+1 TO M
C
      NBTYPE=6
      INNER=0
      DO 12 L=1,MM1
      LP1=L+1
      NBEFR=((L-1)*(2*M-L))/2
      DO 12 I=LP1,M
      INNER=0
      BASESZ=X(L)
      FIXSZ=X(LP1)
      CALL GAUSBT(BETCAL,X(I),X(I+1),REL,ABSER,ROUND,ANS,IER,IPRNT,
     $ FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
   12 COEFAV(NB4+I-L+NBEFR)=ANS/(DEL(I)*DEL(L))
C
C     DETERMINE THE SECTIONAL DEPOSITION COEFFICIENTS OF THE L-TH
C     SECTION ON THE J-TH DEPOSITION SURFACE
C
      REL=1.E-3
    5 DO 1 L=1,M
      DO 1 J=1,3
      NBTYPE=J+6
      IER=1
      CALL GAUS2(DEPOST,X(L),X(L+1),REL,ABSER,ROUND,ANS,IER,DUM,TGAS,
     $PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
    1 COEFAV(NDEPST+J+3*(L-1))=ANS/DEL(L)
      IF(NEWCOF.EQ.5.OR.NEWCOF.GE.11)RETURN
C
C     CALCULATE THE SECTIONAL CONDENSATION COEFFICIENTS,
C     G(SUPER-1,SUB-L,KCOMP),G(SUPER-2A,SUB-L,KCOMP) AND
C     G(SUPER-2B,SUB-L,KCOMP) FOR L=1,...,M
C
    6 DO 4 L=1,M
      NBTYPE=10
      IER=1
      CALL GAUS2(GROWTH,X(L),X(L+1),REL,ABSER,ROUND,ANS,IER,DUM,TGAS,
     $PGAS,NBTYPE)
      IF(IER.NE.0)GO TO 31
    4 COEFAV(NGROW+L)=ANS/DEL(L)
C
      DO 7 L=1,MM1
      DUM=GROWTH(X(L+1),DUMMY,TGAS,PGAS,NBTYPE)/
     $  ((DEL(L+1)+DEL(L))*DEL(L+1)*DEL(L))
      COEFAV(NGROW+M+2*L-1)=DUM*DEL(L+1)**2
    7 COEFAV(NGROW+M+2*L)=DUM*DEL(L)**2
      COEFAV(NGROW+3*M-1)=GROWTH(X(M+1),DUM,TGAS,PGAS,NBTYPE)/
     $  (2.*DEL(M))
      RETURN
C
   31 WRITE(IPRNT,3)IER,NBTYPE
    3 FORMAT(//' OUTER INTEGRATION ERROR NUMBER',I3,
     $'  FOR COEFFICIENT TYPE',I3)
      STOP
      END
C     ******************************************************************
      SUBROUTINE DIFFUN(MKCOMP,T,Q,DQDT)
C
C     THIS ROUTINE CALCULATES THE DERIVATIVES (I.E. EQUATION 50 OF
C     THE PAPER 'SIMULATION OF MULTICOMPONENT AEROSOL DYNAMICS',
C     FRED GELBARD AND JOHN H. SEINFELD, J. COLLOID AND INTERFACE
C     SCIENCE, VOL.78,P.485,1980)
C
      DIMENSION Q(MKCOMP),DQDT(MKCOMP),QT(20)
      COMMON/AVGCOF/COEFAV(880),SRATE(160),M,KCOMP,NB2A,NB2B,NB3,
     $  NB4,NDEPST,NGROW,ICONDN
C
C       STORE THE TOTAL MASS CONCENTRATION OF SECTION L IN QT(L)
C
      DO 1 L=1,M
      SUM=0.
      LKBEF=(L-1)*KCOMP
      DO 2 K=1,KCOMP
    2 SUM=Q(K+LKBEF)+SUM
    1 QT(L)=SUM
C
      DO 3 L=1,M
      LM1=L-1
      LM2=L-2
      LM1KBF=LM1*KCOMP
      LM2KBF=LM2*KCOMP
      L1BF=((L-3)*LM2)/2
      L2BF=(LM1*LM2)/2
C
C       CALCULATE THE CHANGE DUE TO COAGULATION
C
      DO 3 K=1,KCOMP
      SUM=0.
      IF(L.LT.3)GO TO 4
      DO 5 I=1,LM2
    5 SUM=SUM+QT(I)*(COEFAV(NB2A+I+L1BF)*Q(K+LM2KBF)
     $  -COEFAV(NB2A+I+L2BF)*Q(K+LM1KBF))
     $  +Q(KCOMP*(I-1)+K)*(COEFAV(I+L1BF)*QT(LM1)
     $  +COEFAV(NB2B+I+L2BF)*QT(L))
    4 IF(L.GT.1)SUM=SUM+QT(LM1)*(COEFAV(NB3+LM1)*Q(K+LM2KBF)
     $  -COEFAV(NB2A+LM1+L2BF)*Q(K+LM1KBF))
     $  + COEFAV(NB2B+LM1+L2BF)*QT(L)*Q(K+LM2KBF)
    3 DQDT(K+LM1KBF)=SUM - COEFAV(NB3+L)*QT(L)*Q(K+LM1KBF)
C
C     CALCULATE THE REMOVAL RATE FROM A SECTION DUE TO
C     SCAVENGING BY HIGHER SECTIONS
C
      MM1=M-1
      DO 6 L=1,MM1
      LM1=L-1
      LM1KBF=LM1*KCOMP
      LBF=(LM1*(2*M-L))/2
      SUM=0.
      LP1=L+1
      DO 7 I=LP1,M
    7 SUM=SUM+COEFAV(NB4+I-L+LBF)*QT(I)
      DO 6 K=1,KCOMP
    6 DQDT(K+LM1KBF)=DQDT(K+LM1KBF)-SUM*Q(K+LM1KBF)
C
      IF(ICONDN.EQ.0)GO TO 11
C
C       CALCULATE THE EFFECTS OF INTER-SECTIONAL GROWTH
C
      NPM=NGROW+M
      DO 10 K=1,KCOMP
      IF(Q(K).GT.0.)DQDT(K)=DQDT(K)-
     $(COEFAV(NPM+1)*Q(K)+COEFAV(NPM+2)*Q(K+KCOMP))
   10 CONTINUE
C
      DO 12 L=2,M
      NPM=NGROW+M+2*L
      LK=L*KCOMP
      L1K=LK-KCOMP
      L2K=L1K-KCOMP
C
      DO 12 K=1,KCOMP
      IF(Q(K+L2K).GT.0..AND.Q(K+L1K).GT.0.)GO TO 13
      IF(Q(K+L2K).LE.0..AND.Q(K+L1K).LE.0.)GO TO 12
      IF(Q(K+L1K).GT.0.)GO TO 14
C
      DQDT(K+L1K)=DQDT(K+L1K)+
     $(COEFAV(NPM-3)*Q(K+L2K)+COEFAV(NPM-2)*Q(K+L1K))
      GO TO 12
C
   14 DUM=COEFAV(NPM-1)*Q(K+L1K)
      IF(L.NE.M)DUM=DUM+COEFAV(NPM)*Q(K+LK)
      DQDT(K+L1K)=DQDT(K+L1K)-DUM
      GO TO 12
C
   13 DUM=Q(K+L2K)*COEFAV(NPM-3)+Q(K+L1K)*(COEFAV(NPM-2)-COEFAV(NPM-1))
      IF(L.NE.M)DUM=DUM-Q(K+LK)*COEFAV(NPM)
      DQDT(K+L1K)=DQDT(K+L1K)+DUM
   12 CONTINUE
C
C     CALCULATE THE EFFECTS OF INTRA-SECTIONAL GROWTH
C
      DO 15 L=1,M
   15 DQDT(L*KCOMP)=DQDT(L*KCOMP)+COEFAV(NGROW+L)*QT(L)
C
C     COMPUTE EFFECT OF SOURCES AND REMOVAL MECHANISMS
C
   11 DO 8 L=1,M
      L3M1=3*(L-1)
      TOTDEP=0.
      DO 9 I=1,3
    9 TOTDEP=TOTDEP+COEFAV(L3M1+NDEPST+I)
      DO 8 K=1,KCOMP
      MKS=K+(L-1)*KCOMP
    8 DQDT(MKS)=(DQDT(MKS)-TOTDEP*Q(MKS))+SRATE(MKS)
      RETURN
      END

      FUNCTION BETCAL(X,RELER,ABSER,ROUND,IPRNT,FIXSZ,BASESZ,INNER,
     $TGAS,PGAS,NBTYPE)
C
C    THIS ROUTINE CALCULATES THE INNER INTEGRAL OF THE SECTIONAL
C    COAGULATION COEFFICIENTS
C
      EXTERNAL BETA
      YU=FIXSZ
      YL=BASESZ
      IF(INNER.EQ.0)GO TO 3
      YL=ALOG(BASESZ-EXP(X))
      IF(INNER.EQ.1)GO TO 3
      YU=YL
      YL=FIXSZ
C
    3 IER=1
      ABE=ABSER*ABSER
      REL=.5*RELER
      CALL GAUS2(BETA,YL,YU,REL,ABE,ROUND,ANSWR,IER,X,TGAS,PGAS,NBTYPE)
      BETCAL=ANSWR
      IF(IER.EQ.0)RETURN
C
      WRITE(IPRNT,4)NBTYPE,X,YL,YU,IER
    4 FORMAT(' INNER INTEGRATION ERROR, INTEGRAL TYPE',I3,
     $/' OUTER VARIABLE=',E12.4,' INNER DOMAIN=',2E12.4,'  ERROR=',I3)
      STOP
      END
C
C
C


      BLOCK DATA
C
      COMMON/DBLK/CT1P1(880),CT1P2(880),CT2P1(880),CT2P2(880)
      DATA CT1P1/880*0./
      DATA CT2P1/880*0./
      DATA CT1P2/880*0./
      DATA CT2P2/880*0./
      END
      SUBROUTINE GAUS2(F,XL,XU,RELER,ABSER,ROUND,ANSWR,IER,EXTRA1,
     $EXTRA2,EXTRA3,NEXTRA)
C
C     THIS ROUTINE COMPUTES THE INTEGRAL OF F(X,EXTRA1,EXTRA2,EXTRA3,
C     NEXTRA) FROM XL TO XU.  A TWO POINT GAUSS-LEGENDRE QUADRATURE
C     FORMULA IS USED. CONVERGENCE IS CHECKED BY DIVIDING THE DOMAIN IN
C     HALF AND REAPPLYING THE FORMULA IN EACH HALF.  IF THE VALUE OF THE
C     INTEGRAL CALCULATED OVER THE ENTIRE DOMAIN IS NOT EQUAL TO THE
C     SUM OF THE INTEGRALS IN EACH HALF (WITHIN THE
C     USER SPECIFIED ERROR TOLERANCE), EACH HALF IS FURTHER DIVIDED
C     INTO HALVES AND THE GAUSS-LEGENDRE FORMULA IS REAPPLIED. THE
C     PROCEDURE WILL CONTINUE ITERATING (I.E. SUBDIVIDING),UNTIL
C     CONVERGENCE IS ACHIEVED OR THE MAXIMUM NUMBER OF ITERATIONS IS
C     REACHED.  THE MAXIMUM NUMBER OF ITERATIONS IS EITHER THE SET
C     DEFAULT VALUE OF 30 (WHERE THE FIRST ITERATION IS FOR EVALUATION
C     OVER THE ENTIRE DOMAIN), OR THE LARGEST NUMBER OF ITERATIONS
C     POSSIBLE WITHOUT SEVERE MACHINE ROUND-OFF ERRORS, WHICHEVER IS
C     SMALLER.  THE MACHINE ROUND-OFF ERROR CHECK IS MADE TO INSURE
C     THAT THE INTEGRATION DOMAIN IS NOT TOO SMALL SO AS TO BE
C     INSIGNIFICANT.  SINCE THE PROCEDURE IS ADAPTIVE, ONLY THE REGIONS
C     WHICH ARE NONCONVERGENT ARE DIVIDED INTO HALVES. THIS CODE WAS
C     WAS WRITTEN BY FRED GELBARD, FEBRUARY, 1982.
C
C                         CALLING SEQUENCE
C
C     CALL GAUS2(F,XL,XU,RELER,ABSER,ROUND,ANSWR,IER,EXTRA1,EXTRA2,
C                EXTRA3,NEXTRA)
C
C     NOTE:THE USER MUST SUPPLY A FUNCTION SUBROUTINE F(X,EXTRA1,EXTRA2,
C          EXTRA3,NEXTRA) WHICH MUST BE DECLARED EXTERNAL IN THE
C          ROUTINE THAT CALLS GAUS2.  THE VARIABLE OF INTEGRATION IS THE
C          FIRST ARGUMENT OF THE FUNCTION F.
C
C                        INPUT VARIABLES
C
C     F      EXTERNAL FUNCTION ROUTINE FOR INTEGRAND F(X,EXTRA1,EXTRA2,
C            EXTRA3,NEXTRA)
C     XL     LOWER LIMIT OF INTEGRATION (REAL)
C     XU     UPPER LIMIT OF INTEGRATION (REAL)
C     RELER  RELATIVE ERROR TOLERANCE (REAL)
C     ABSER  ABSOLUTE ERROR TOLERANCE (REAL)
C     EXTRA1 VARIABLE WHICH MAY BE PASSED TO FUNCTION F  (REAL)
C     EXTRA2 VARIABLE WHICH MAY BE PASSED TO FUNCTION F  (REAL)
C     EXTRA3 VARIABLE WHICH MAY BE PASSED TO FUNCTION F  (REAL)
C     NEXTRA VARIABLE WHICH MAY BE PASSED TO FUNCTION F (INTEGER)
C     IER    NORMALLY SET TO ZERO, BUT MAY BE SET TO 1 FOR THE
C             INTEGRAL TO BE COMPUTED BY A SINGLE APPLICATION
C             OF GAUSS-LEGENDRE FORMULA IF(10.*ABS(XU-XL)/RELER.LT.
C             AMAX1(ABS(XU),ABS(XL))         (INTEGER)
C
C           IF A1 AND A2 ARE THE  INTEGRALS COMPUTED ONCE OVER
C           THE REGION AND BY SUMMING THE VALUES IN BOTH HALVES
C           RESPECTIVELY,THEN CONVERGENCE IS OBTAINED WHEN
C               ABS(A1-A2)/RELER.LT.ABS(A2)+ABSER
C
C     ROUND MACHINE UNIT ROUND-OFF ERROR (I.E. THE SMALLEST NUMBER
C           ADDED TO 1.0 WHICH IS GREATER THAN 1.0)
C
C           MACHINES                  VALUES FOR ROUND
C           DG ECLIPSE                   1.2E-7
C           IBM 360/370                  9.6E-7
C           DEC 10                       7.7E-9
C           DEC VAX                      6.0E-8
C           CDC 6600/7600                7.7E-15
C           UNIVAC 1108                  1.5E-8
C
C
C                  OUTPUT VARIABLES
C
C     XL    UNCHANGED FROM INPUT FOR IER.LT.1. IF IER.GE.1, THEN EQUAL
C           TO LOWER LIMIT OF REGION FOR WHICH CONVERGENCE
C           WAS NOT OBTAINED
C     XU    UNCHANGED FROM INPUT FOR IER.LT.1. IF IER.GE.1, THEN EQUAL
C           TO UPPER LIMIT OF REGION FOR WHICH CONVERGENCE
C           WAS NOT OBTAINED
C     RELER UNCHANGED FROM INPUT UNLESS IER.GE.1, THEN EQUAL TO
C           INTEGRAL IN REGION FROM XL TO XU AT LAST ITERATION
C     ABSER UNCHANGED FROM INPUT UNLESS IER.GE.1. THEN EQUAL TO INTEGRAL
C           IN REGION FROM XL TO XU AT NEXT TO LAST ITERATION
C     ROUND UNCHANGED FROM INPUT
C     ANSWR VALUE OF INTEGRAL UNLESS IER.NE.0
C     IER   INTEGER ERROR FLAG
C             0 NO ERRORS, CONVERGENCE OBTAINED
C            -2 INTEGRATION DOMAIN IS TOO SMALL. ANSWR COMPUTED BY
C               SINGLE APPLICATION OF GAUSS-LEGENDRE FORMULA
C            -1 INTEGRATION DOMAIN IS TOO SMALL FOR GIVEN MACHINE
C               ROUND-OFF ERROR. ANSWR COMPUTED BY SINGLE APPLICATION
C               OF GAUSS-LEGENDRE FORMULA
C         .GE.1 NUMBER OF TIMES DIVIDED INTO HALVES BEFORE
C               REACHING MAXIMUM NUMBER OF SUBDIVISIONS. ANSWR
C               DETERMINED BY SINGLE APPLICATION OF GAUSS-LEGENDRE
C               FORMULA
C
C                       DIMENSIONS
C
C     TO RESET DEFAULT MAXIMUM NUMBER OF DIVISIONS (I.E. 30), CHANGE
C     NMAX TO THE NEW MAXIMUM PLUS 1. THE ARRAY DIMENSIONS SHOULD BE
C     A(2,NMAX),X(NMAX),Y(NMAX),H(NMAX) AND ISECT(NMAX)
C
C                    VARIABLES IN CODE
C
C     A(I,N)   INTEGRAL IN LEFT HALF (CORRESPONDING TO I=1), OR RIGHT
C              HALF (CORRESPONDING TO I=2) AT THE N-TH LEVEL.  FOR
C              N=1, INTEGRAL IS CONTAINED IN A(2,1) AND A(1,1)
C              IS NEVER USED
C     H(N)     STEP SIZE AT N-TH LEVEL
C     ISIDE(N) SIDE AT N-TH LEVEL WHERE ISIDE(N)=1 OR 2 CORRESPONDING TO
C              THE LEFT OR RIGHT HALF, RESPECTIVELY
C     N        LEVEL OF REGION
C     NMAX     MAXIMUM NUMBER OF LEVELS
C     X(N)     SMALLEST X VALUE AT THE N-TH LEVEL
C
      DIMENSION A(2,31),X(31),H(31),ISIDE(31)
      FUN(XD,HD)=0.5*HD*(F(XD+.2113248654052*HD,EXTRA1,EXTRA2,EXTRA3,
     $NEXTRA)+F(XD+.788675134598*HD,EXTRA1,EXTRA2,EXTRA3,NEXTRA))
      NMAX=31
C
      H(1)=XU-XL
      A(2,1)=FUN(XL,H(1))
      IF(IER.NE.1)GO TO 2
      IF(10.*ABS(H(1))/RELER.LT.AMAX1(ABS(XU),ABS(XL)))GO TO 7
C
C     CHECK THAT THE SIZE DOMAIN IS NOT TOO SMALL
C
    2 IF(ABS(XU-XL).GT.4.*ROUND*AMAX1(ABS(XL),ABS(XU)))GO TO 8
      ANSWR=A(2,1)
      IER=-2
      RETURN
C
C     DETERMINE THE MAXIMUM NUMBER OF SUBDIVISIONS BEFORE ROUND OFF
C     ERROR WOULD MAKE IT DIFFICULT TO DISTINGUISH POINTS IN THE DOMAIN
C
    8 RATIO=AMAX1(ABS(XU/H(1)),ABS(XL/H(1)))
      N1= 2 - IFIX(1.4427*ALOG(RATIO*ROUND))
      NMAX=MIN0(NMAX,N1)
      IF(NMAX.GT.1)GO TO 10
      IER=-1
      RETURN
C
   10 ISIDE(1)=2
      DO 1 I=2,NMAX
      ISIDE(I)=2
    1 H(I)=.5*H(I-1)
C
      X(2)=XL
      N=2
C
C
C     CALCULATE INTEGRAL IN EACH HALF.  AT LEVEL N, STORE RIGHT HALF
C     IN A(1,N) AND LEFT HALF IN A(2,N)
C
    4 SUM=0.
      A(1,N)=FUN(X(N),H(N))
      A(2,N)=FUN(X(N)+H(N),H(N))
      SUM=A(1,N)+A(2,N)
C
C     CHECK IF SUM IS EQUAL (WITHIN SPECIFIED TOLERANCES), TO THE
C     INTEGRAL COMPUTED OVER THE ENTIRE REGION. IF CONVERGENCE HAS NOT
C     BEEN OBTAINED, CHECK IF THE MAXIMUM NUMBER OF SUBDIVISIONS HAS
C     BEEN REACHED. IF THE MAXIMUM HAS NOT BEEN REACHED, RESET
C     THE LOWEST X VALUE AND SET ISIDE(N)=1 INDICATING A
C     NEW LEVEL AND RESTART BY COMPUTING THE INTEGRAL IN
C     THE LEFT HALF.
C
      IF(ABS(SUM-A(ISIDE(N),N-1))/RELER.LT.ABS(SUM)+ABSER)GO TO 3
      IF(N.EQ.NMAX)GO TO 9
      N=N+1
      ISIDE(N)=1
      X(N)=X(N-1)
      GO TO 4
C
C     NOW THAT CONVERGENCE HAS BEEN OBTAINED, REPLACE FIRST
C     APPROXIMATION OVER THE DOMAIN WITH SUM AND CHECK IF THIS
C     COMPLETES BOTH HALVES AT THE N-TH LEVEL (I.E. CHECK
C     IF ISIDE(N)=2). IF WE HAVE GONE THROUGH ALL REGIONS (I.E.N=2),
C     EXIT. IF ADDITIONAL LEVELS ARE TO BE COMPUTED (N.GT.2), REPLACE
C     FIRST APPROXIMATION WITH SUM AND MOVE TO A HIGHER LEVEL,
C     (I.E. A LOWER VALUE OF N).
C
    3 A(ISIDE(N),N-1)=SUM
      IF(ISIDE(N).EQ.1)GO TO 5
    6 IF(N.EQ.2)GO TO 7
      N=N-1
      A(ISIDE(N),N-1)=A(1,N)+A(2,N)
      IF(ISIDE(N).EQ.2)GO TO 6
C
C     MOVE LOWER LIMIT OF DOMAIN TO RIGHT HALF
C
    5 ISIDE(N)=2
      X(N)=X(N-1)+H(N-1)
      GO TO 4
C
C     TOO MANY ITERATIONS, SET ERROR FLAG
C
    9 IER=N-1
      XL=X(N)
      XU=X(N)+2.*H(N)
      RELER=SUM
      ABSER=A(ISIDE(N),N-1)
      RETURN
C
C     CONVERGENCE OBTAINED
C
    7 IER=0
      ANSWR=A(2,1)
      RETURN
      END
      SUBROUTINE GAUSBT(F,XL,XU,RELER,ABSER,ROUND,ANSWR,IER,IPRNT,
     $FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)
C
C     SEE DOCUMENTATION FOR GAUS2
C
      DIMENSION A(2,31),X(31),H(31),ISIDE(31)
      FUN(XD,HD)=0.5*HD*(F(XD+.2113248654052*HD,RELER,ABSER,ROUND,
     $ IPRNT,FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE)+
     $                   F(XD+.788675134598*HD,RELER,ABSER,ROUND,
     $ IPRNT,FIXSZ,BASESZ,INNER,TGAS,PGAS,NBTYPE))
      NMAX=31
      H(1)=XU-XL
      A(2,1)=FUN(XL,H(1))
      IF(IER.NE.1)GO TO 2
      IF(10.*ABS(H(1))/RELER.LT.AMAX1(ABS(XU),ABS(XL)))GO TO 7
    2 IF(ABS(XU-XL).GT.4.*ROUND*AMAX1(ABS(XL),ABS(XU)))GO TO 8
      ANSWR=A(2,1)
      IER=-2
      RETURN
    8 RATIO=AMAX1(ABS(XU/H(1)),ABS(XL/H(1)))
      N1= 2 - IFIX(1.4427*ALOG(RATIO*ROUND))
      NMAX=MIN0(NMAX,N1)
      IF(NMAX.GT.1)GO TO 10
      IER=-1
      RETURN
   10 ISIDE(1)=2
      DO 1 I=2,NMAX
      ISIDE(I)=2
    1 H(I)=.5*H(I-1)
      X(2)=XL
      N=2
    4 SUM=0.
      A(1,N)=FUN(X(N),H(N))
      A(2,N)=FUN(X(N)+H(N),H(N))
      SUM=A(1,N)+A(2,N)
      IF(ABS(SUM-A(ISIDE(N),N-1))/RELER.LT.ABS(SUM)+ABSER)GO TO 3
      IF(N.EQ.NMAX)GO TO 9
      N=N+1
      ISIDE(N)=1
      X(N)=X(N-1)
      GO TO 4
    3 A(ISIDE(N),N-1)=SUM
      IF(ISIDE(N).EQ.1)GO TO 5
    6 IF(N.EQ.2)GO TO 7
      N=N-1
      A(ISIDE(N),N-1)=A(1,N)+A(2,N)
      IF(ISIDE(N).EQ.2)GO TO 6
    5 ISIDE(N)=2
      X(N)=X(N-1)+H(N-1)
      GO TO 4
    9 IER=N-1
      XL=X(N)
      XU=X(N)+2.*H(N)
      RELER=SUM
      ABSER=A(ISIDE(N),N-1)
      RETURN
    7 IER=0
      ANSWR=A(2,1)
      RETURN
      END
      SUBROUTINE RKF45(F,NEQN,Y,T,TOUT,RELERR,ABSERR,IFLAG,WORK,IWORK,U)
C
C     FEHLBERG FOURTH-FIFTH ORDER RUNGE-KUTTA METHOD
C
C     WRITTEN BY H.A.WATTS AND L.F.SHAMPINE
C                   SANDIA LABORATORIES
C                  ALBUQUERQUE,NEW MEXICO
C
C    RKF45 IS PRIMARILY DESIGNED TO SOLVE NON-STIFF AND MILDLY STIFF
C    DIFFERENTIAL EQUATIONS WHEN DERIVATIVE EVALUATIONS ARE INEXPENSIVE.
C    RKF45 SHOULD GENERALLY NOT BE USED WHEN THE USER IS DEMANDING
C    HIGH ACCURACY.
C
C***********************************************************************
C ABSTRACT
C***********************************************************************
C
C    SUBROUTINE  RKF45  INTEGRATES A SYSTEM OF NEQN FIRST ORDER
C    ORDINARY DIFFERENTIAL EQUATIONS OF THE FORM
C             DY(I)/DT = F(NEQN,T,Y(1),Y(2),...,Y(NEQN))
C              WHERE THE Y(I) ARE GIVEN AT T .
C    TYPICALLY THE SUBROUTINE IS USED TO INTEGRATE FROM T TO TOUT BUT IT
C    CAN BE USED AS A ONE-STEP INTEGRATOR TO ADVANCE THE SOLUTION A
C    SINGLE STEP IN THE DIRECTION OF TOUT.  ON RETURN THE PARAMETERS IN
C    THE CALL LIST ARE SET FOR CONTINUING THE INTEGRATION. THE USER HAS
C    ONLY TO CALL RKF45 AGAIN (AND PERHAPS DEFINE A NEW VALUE FOR TOUT).
C    ACTUALLY, RKF45 IS AN INTERFACING ROUTINE WHICH CALLS SUBROUTINE
C    RKFS FOR THE SOLUTION.  RKFS IN TURN CALLS SUBROUTINE  FEHL WHICH
C    COMPUTES AN APPROXIMATE SOLUTION OVER ONE STEP.
C
C    RKF45  USES THE RUNGE-KUTTA-FEHLBERG (4,5)  METHOD DESCRIBED
C    IN THE REFERENCES
C    E.FEHLBERG , LOW-ORDER CLASSICAL RUNGE-KUTTA FORMULAS WITH STEPSIZE
C                 CONTROL , NASA TR R-315.
C                 ALSO IN  COMPUTING,6(1970),PP.61-71.
C
C    L.F.SHAMPINE AND H.A.WATTS, PRACTICAL SOLUTION OF ORDINARY
C                 DIFFERENTIAL EQUATIONS BY RUNGE-KUTTA METHODS,
C                 SANDIA LABORATORIES REPORT SAND76-0585.
C
C    THE PERFORMANCE OF RKF45 IS ILLUSTRATED IN THE REFERENCE
C    L.F.SHAMPINE,H.A.WATTS,S.DAVENPORT, SOLVING NON-STIFF ORDINARY
C                 DIFFERENTIAL EQUATIONS-THE STATE OF THE ART ,
C                 SANDIA LABORATORIES REPORT SAND75-0182 .  ALSO IN
C                 SIAM REVIEW,18(1976),PP.376-411.
C
C
C    THE PARAMETERS REPRESENT-
C      F -- SUBROUTINE F(NEQN,T,Y,YP) TO EVALUATE DERIVATIVES YP(I)
C      NEQN -- NUMBER OF EQUATIONS TO BE INTEGRATED
C      Y(*) -- SOLUTION VECTOR AT T
C      T -- INDEPENDENT VARIABLE
C      TOUT -- OUTPUT POINT AT WHICH SOLUTION IS DESIRED
C      U -- UNIT ROUND OFF ERROR
C      RELERR,ABSERR -- RELATIVE AND ABSOLUTE ERROR TOLERANCES FOR LOCAL
C            ERROR TEST. AT EACH STEP THE CODE REQUIRES THAT
C                 ABS(LOCAL ERROR) .LE. RELERR*ABS(Y) + ABSERR
C            FOR EACH COMPONENT OF THE LOCAL ERROR AND SOLUTION VECTORS
C      IFLAG -- INDICATOR FOR STATUS OF INTEGRATION
C      WORK(*) -- ARRAY TO HOLD INFORMATION INTERNAL TO RKF45 WHICH IS
C            NECESSARY FOR SUBSEQUENT CALLS. MUST BE DIMENSIONED
C            AT LEAST  3+6*NEQN
C      IWORK(*) -- INTEGER ARRAY USED TO HOLD INFORMATION INTERNAL TO
C            RKF45 WHICH IS NECESSARY FOR SUBSEQUENT CALLS. MUST BE
C            DIMENSIONED AT LEAST  5
C
C
C***********************************************************************
C  FIRST CALL TO RKF45
C***********************************************************************
C
C    THE USER MUST PROVIDE STORAGE IN HIS CALLING PROGRAM FOR THE ARRAYS
C    IN THE CALL LIST  -      Y(NEQN) , WORK(3+6*NEQN) , IWORK(5)  ,
C    DECLARE F IN AN EXTERNAL STATEMENT, SUPPLY SUBROUTINE F(NEQN,T,Y,YP
C    AND INITIALIZE THE FOLLOWING PARAMETERS-
C
C      NEQN -- NUMBER OF EQUATIONS TO BE INTEGRATED.  (NEQN .GE. 1)
C      Y(*) -- VECTOR OF INITIAL CONDITIONS
C      T -- STARTING POINT OF INTEGRATION , MUST BE A VARIABLE
C      TOUT -- OUTPUT POINT AT WHICH SOLUTION IS DESIRED.
C            T=TOUT IS ALLOWED ON THE FIRST CALL ONLY, IN WHICH CASE
C            RKF45 RETURNS WITH IFLAG=2 IF CONTINUATION IS POSSIBLE.
C      RELERR,ABSERR -- RELATIVE AND ABSOLUTE LOCAL ERROR TOLERANCES
C            WHICH MUST BE NON-NEGATIVE. RELERR MUST BE A VARIABLE WHILE
C            ABSERR MAY BE A CONSTANT. THE CODE SHOULD NORMALLY NOT BE
C            USED WITH RELATIVE ERROR CONTROL SMALLER THAN ABOUT 1.E-8 .
C            TO AVOID LIMITING PRECISION DIFFICULTIES THE CODE REQUIRES
C            RELERR TO BE LARGER THAN AN INTERNALLY COMPUTED RELATIVE
C            ERROR PARAMETER WHICH IS MACHINE DEPENDENT. IN PARTICULAR,
C            PURE ABSOLUTE ERROR IS NOT PERMITTED. IF A SMALLER THAN
C            ALLOWABLE VALUE OF RELERR IS ATTEMPTED, RKF45 INCREASES
C            RELERR APPROPRIATELY AND RETURNS CONTROL TO THE USER BEFORE
C            CONTINUING THE INTEGRATION.
C      IFLAG -- +1,-1  INDICATOR TO INITIALIZE THE CODE FOR EACH NEW
C            PROBLEM. NORMAL INPUT IS +1. THE USER SHOULD SET IFLAG=-1
C            ONLY WHEN ONE-STEP INTEGRATOR CONTROL IS ESSENTIAL. IN THIS
C            CASE, RKF45 ATTEMPTS TO ADVANCE THE SOLUTION A SINGLE STEP
C            IN THE DIRECTION OF TOUT EACH TIME IT IS CALLED. SINCE THIS
C            MODE OF OPERATION RESULTS IN EXTRA COMPUTING OVERHEAD, IT
C            SHOULD BE AVOIDED UNLESS NEEDED.
C
C
C***********************************************************************
C  OUTPUT FROM RKF45
C***********************************************************************
C
C      Y(*) -- SOLUTION AT T
C      T -- LAST POINT REACHED IN INTEGRATION.
C      IFLAG = 2 -- INTEGRATION REACHED TOUT.INDICATES SUCCESSFUL RETURN
C                   AND IS THE NORMAL MODE FOR CONTINUING INTEGRATION.
C            =-2 -- A SINGLE SUCCESSFUL STEP IN THE DIRECTION OF TOUT
C                   HAS BEEN TAKEN. NORMAL MODE FOR CONTINUING
C                   INTEGRATION ONE STEP AT A TIME.
C            = 3 -- INTEGRATION WAS NOT COMPLETED BECAUSE RELATIVE ERROR
C                   TOLERANCE WAS TOO SMALL. RELERR HAS BEEN INCREASED
C                   APPROPRIATELY FOR CONTINUING.
C            = 4 -- INTEGRATION WAS NOT COMPLETED BECAUSE MORE THAN
C                   3000 DERIVATIVE EVALUATIONS WERE NEEDED. THIS
C                   IS APPROXIMATELY 500 STEPS.
C            = 5 -- INTEGRATION WAS NOT COMPLETED BECAUSE SOLUTION
C                   VANISHED MAKING A PURE RELATIVE ERROR TEST
C                   IMPOSSIBLE. MUST USE NON-ZERO ABSERR TO CONTINUE.
C                   USING THE ONE-STEP INTEGRATION MODE FOR ONE STEP
C                   IS A GOOD WAY TO PROCEED.
C            = 6 -- INTEGRATION WAS NOT COMPLETED BECAUSE REQUESTED
C                   ACCURACY COULD NOT BE ACHIEVED USING SMALLEST
C                   ALLOWABLE STEPSIZE. USER MUST INCREASE THE ERROR
C                   TOLERANCE BEFORE CONTINUED INTEGRATION CAN BE
C                   ATTEMPTED.
C            = 7 -- IT IS LIKELY THAT RKF45 IS INEFFICIENT FOR SOLVING
C                   THIS PROBLEM. TOO MUCH OUTPUT IS RESTRICTING THE
C                   NATURAL STEPSIZE CHOICE. USE THE ONE-STEP INTEGRATOR
C                   MODE.
C            = 8 -- INVALID INPUT PARAMETERS
C                   THIS INDICATOR OCCURS IF ANY OF THE FOLLOWING IS
C                   SATISFIED -   NEQN .LE. 0
C                                 T=TOUT  AND  IFLAG .NE. +1 OR -1
C                                 RELERR OR ABSERR .LT. 0.
C                                 IFLAG .EQ. 0  OR  .LT. -2  OR  .GT. 8
C      WORK(*),IWORK(*) -- INFORMATION WHICH IS USUALLY OF NO INTEREST
C                   TO THE USER BUT NECESSARY FOR SUBSEQUENT CALLS.
C                   WORK(1),...,WORK(NEQN) CONTAIN THE FIRST DERIVATIVES
C                   OF THE SOLUTION VECTOR Y AT T. WORK(NEQN+1) CONTAINS
C                   THE STEPSIZE H TO BE ATTEMPTED ON THE NEXT STEP.
C                   IWORK(1) CONTAINS THE DERIVATIVE EVALUATION COUNTER.
C
C
C***********************************************************************
C  SUBSEQUENT CALLS TO RKF45
C***********************************************************************
C
C    SUBROUTINE RKF45 RETURNS WITH ALL INFORMATION NEEDED TO CONTINUE
C    THE INTEGRATION. IF THE INTEGRATION REACHED TOUT,THE USER NEED ONLY
C    DEFINE A NEW TOUT AND CALL RKF45 AGAIN. IN THE ONE-STEP INTEGRATOR
C    MODE (IFLAG=-2) THE USER MUST KEEP IN MIND THAT EACH STEP TAKEN IS
C    IN THE DIRECTION OF THE CURRENT TOUT. UPON REACHING TOUT (INDICATED
C    BY CHANGING IFLAG TO 2),THE USER MUST THEN DEFINE A NEW TOUT AND
C    RESET IFLAG TO -2 TO CONTINUE IN THE ONE-STEP INTEGRATOR MODE.
C
C    IF THE INTEGRATION WAS NOT COMPLETED BUT THE USER STILL WANTS TO
C    CONTINUE (IFLAG=3,4 CASES), HE JUST CALLS RKF45 AGAIN. WITH IFLAG=3
C    THE RELERR PARAMETER HAS BEEN ADJUSTED APPROPRIATELY FOR CONTINUING
C    THE INTEGRATION. IN THE CASE OF IFLAG=4 THE FUNCTION COUNTER WILL
C    BE RESET TO 0 AND ANOTHER 3000 FUNCTION EVALUATIONS ARE ALLOWED.
C
C    HOWEVER,IN THE CASE IFLAG=5, THE USER MUST FIRST ALTER THE ERROR
C    CRITERION TO USE A POSITIVE VALUE OF ABSERR BEFORE INTEGRATION CAN
C    PROCEED. IF HE DOES NOT,EXECUTION IS TERMINATED.
C
C    ALSO,IN THE CASE IFLAG=6, IT IS NECESSARY FOR THE USER TO RESET
C    IFLAG TO 2 (OR -2 WHEN THE ONE-STEP INTEGRATION MODE IS BEING USED)
C    AS WELL AS INCREASING EITHER ABSERR,RELERR OR BOTH BEFORE THE
C    INTEGRATION CAN BE CONTINUED. IF THIS IS NOT DONE, EXECUTION WILL
C    BE TERMINATED. THE OCCURRENCE OF IFLAG=6 INDICATES A TROUBLE SPOT
C    (SOLUTION IS CHANGING RAPIDLY,SINGULARITY MAY BE PRESENT) AND IT
C    OFTEN IS INADVISABLE TO CONTINUE.
C
C    IF IFLAG=7 IS ENCOUNTERED, THE USER SHOULD USE THE ONE-STEP
C    INTEGRATION MODE WITH THE STEPSIZE DETERMINED BY THE CODE OR
C    CONSIDER SWITCHING TO THE ADAMS CODES DE/STEP,INTRP. IF THE USER
C    INSISTS UPON CONTINUING THE INTEGRATION WITH RKF45, HE MUST RESET
C    IFLAG TO 2 BEFORE CALLING RKF45 AGAIN. OTHERWISE,EXECUTION WILL BE
C    TERMINATED.
C
C    IF IFLAG=8 IS OBTAINED, INTEGRATION CAN NOT BE CONTINUED UNLESS
C    THE INVALID INPUT PARAMETERS ARE CORRECTED.
C
C    IT SHOULD BE NOTED THAT THE ARRAYS WORK,IWORK CONTAIN INFORMATION
C    REQUIRED FOR SUBSEQUENT INTEGRATION. ACCORDINGLY, WORK AND IWORK
C    SHOULD NOT BE ALTERED.
C
C***********************************************************************
C
      DIMENSION Y(NEQN),WORK(1),IWORK(5)
C
      EXTERNAL F
C
C
C     COMPUTE INDICES FOR THE SPLITTING OF THE WORK ARRAY
C
      K1M=NEQN+1
      K1=K1M+1
      K2=K1+NEQN
      K3=K2+NEQN
      K4=K3+NEQN
      K5=K4+NEQN
      K6=K5+NEQN
C
C***********************************************************************
C     THIS INTERFACING ROUTINE MERELY RELIEVES THE USER OF A LONG
C     CALLING LIST VIA THE SPLITTING APART OF TWO WORKING STORAGE
C     ARRAYS. IF THIS IS NOT COMPATIBLE WITH THE USERS COMPILER,
C     HE MUST USE RKFS DIRECTLY.
C***********************************************************************
C
      CALL RKFS(F,NEQN,Y,T,TOUT,RELERR,ABSERR,IFLAG,WORK(1),WORK(K1M),
     1          WORK(K1),WORK(K2),WORK(K3),WORK(K4),WORK(K5),WORK(K6),
     2        WORK(K6+1),IWORK(1),IWORK(2),IWORK(3),IWORK(4),IWORK(5),U)
C
      RETURN
      END
      SUBROUTINE RKFS(F,NEQN,Y,T,TOUT,RELERR,ABSERR,IFLAG,YP,H,F1,F2,F3,
     1                F4,F5,SAVRE,SAVAE,NFE,KOP,INIT,JFLAG,KFLAG,U)
C
C     FEHLBERG FOURTH-FIFTH ORDER RUNGE-KUTTA METHOD
C
C***********************************************************************
C
C     RKFS INTEGRATES A SYSTEM OF FIRST ORDER ORDINARY DIFFERENTIAL
C     EQUATIONS AS DESCRIBED IN THE COMMENTS FOR RKF45 .
C     THE ARRAYS YP,F1,F2,F3,F4,AND F5 (OF DIMENSION AT LEAST NEQN) AND
C     THE VARIABLES H,SAVRE,SAVAE,NFE,KOP,INIT,JFLAG,AND KFLAG ARE USED
C     INTERNALLY BY THE CODE AND APPEAR IN THE CALL LIST TO ELIMINATE
C     LOCAL RETENTION OF VARIABLES BETWEEN CALLS. ACCORDINGLY, THEY
C     SHOULD NOT BE ALTERED. ITEMS OF POSSIBLE INTEREST ARE
C         YP - DERIVATIVE OF SOLUTION VECTOR AT T
C         H  - AN APPROPRIATE STEPSIZE TO BE USED FOR THE NEXT STEP
C         NFE- COUNTER ON THE NUMBER OF DERIVATIVE FUNCTION EVALUATIONS
C
C***********************************************************************
C
      LOGICAL HFAILD,OUTPUT
C
      DIMENSION Y(NEQN),YP(NEQN),F1(NEQN),F2(NEQN),F3(NEQN),F4(NEQN),
     1          F5(NEQN)
C
      EXTERNAL F
C
C***********************************************************************
C
C  THE COMPUTER UNIT ROUNDOFF ERROR U IS THE SMALLEST POSITIVE VALUE
C  REPRESENTABLE IN THE MACHINE SUCH THAT  1.+ U .GT. 1.
C                  VALUES TO BE USED ARE
C              U = 9.5E-7          FOR IBM 360/370
C              U = 1.5E-8          FOR UNIVAC 1108
C              U = 7.5E-9          FOR PDP-10
C              U = 7.1E-15         FOR CDC 6000  SERIES
C              U = 2.2E-16         FOR IBM 360/370  DOUBLE PRECISION
C
C**** DATA U/7.1E-15/  ADD THIS CARD IF U NOT IN CALL LIST **********
C
C***********************************************************************
C
C  REMIN IS A TOLERANCE THRESHOLD WHICH IS ALSO DETERMINED BY THE
C  INTEGRATION METHOD. IN PARTICULAR, A FIFTH ORDER METHOD WILL
C  GENERALLY NOT BE CAPABLE OF DELIVERING ACCURACIES NEAR LIMITING
C  PRECISION ON COMPUTERS WITH LONG WORDLENGTHS.
C
      DATA REMIN/1.E-12/
C
C***********************************************************************
C
C     THE EXPENSE IS CONTROLLED BY RESTRICTING THE NUMBER
C     OF FUNCTION EVALUATIONS TO BE APPROXIMATELY MAXNFE.
C     AS SET,THIS CORRESPONDS TO ABOUT 500 STEPS.
C
      DATA MAXNFE/3000/
C
C***********************************************************************
C
C
C     CHECK INPUT PARAMETERS
C
C
      IF (NEQN .LT. 1) GO TO 10
      IF ((RELERR .LT. 0.)  .OR.  (ABSERR .LT. 0.)) GO TO 10
      MFLAG=IABS(IFLAG)
      IF ((MFLAG .GE. 1)  .AND.  (MFLAG .LE. 8)) GO TO 20
C
C     INVALID INPUT
   10 IFLAG=8
      RETURN
C
C     IS THIS THE FIRST CALL
   20 IF (MFLAG .EQ. 1) GO TO 50
C
C     CHECK CONTINUATION POSSIBILITIES
C
      IF ((T .EQ. TOUT) .AND. (KFLAG .NE. 3)) GO TO 10
      IF (MFLAG .NE. 2) GO TO 25
C
C     IFLAG = +2 OR -2
      IF (KFLAG .EQ. 3) GO TO 45
      IF (INIT .EQ. 0) GO TO 45
      IF (KFLAG .EQ. 4) GO TO 40
      IF ((KFLAG .EQ. 5)  .AND.  (ABSERR .EQ. 0.)) GO TO 30
      IF ((KFLAG .EQ. 6)  .AND.  (RELERR .LE. SAVRE)  .AND.
     1    (ABSERR .LE. SAVAE)) GO TO 30
      GO TO 50
C
C     IFLAG = 3,4,5,6,7 OR 8
   25 IF (IFLAG .EQ. 3) GO TO 45
      IF (IFLAG .EQ. 4) GO TO 40
      IF ((IFLAG .EQ. 5) .AND. (ABSERR .GT. 0.)) GO TO 45
C
C     INTEGRATION CANNOT BE CONTINUED SINCE USER DID NOT RESPOND TO
C     THE INSTRUCTIONS PERTAINING TO IFLAG=5,6,7 OR 8
   30 STOP
C
C***********************************************************************
C
C     RESET FUNCTION EVALUATION COUNTER
   40 NFE=0
      IF (MFLAG .EQ. 2) GO TO 50
C
C     RESET FLAG VALUE FROM PREVIOUS CALL
   45 IFLAG=JFLAG
      IF (KFLAG .EQ. 3) MFLAG=IABS(IFLAG)
C
C     SAVE INPUT IFLAG AND SET CONTINUATION FLAG VALUE FOR SUBSEQUENT
C     INPUT CHECKING
   50 JFLAG=IFLAG
      KFLAG=0
C
C     SAVE RELERR AND ABSERR FOR CHECKING INPUT ON SUBSEQUENT CALLS
      SAVRE=RELERR
      SAVAE=ABSERR
C
C     RESTRICT RELATIVE ERROR TOLERANCE TO BE AT LEAST AS LARGE AS
C     2U+REMIN TO AVOID LIMITING PRECISION DIFFICULTIES ARISING FROM
C     IMPOSSIBLE ACCURACY REQUESTS
C
      RER=2.*U+REMIN
      IF (RELERR .GE. RER) GO TO 55
C
C     RELATIVE ERROR TOLERANCE TOO SMALL
      RELERR=RER
      IFLAG=3
      KFLAG=3
      RETURN
C
   55 U26=26.*U
C
      DT=TOUT-T
C
      IF (MFLAG .EQ. 1) GO TO 60
      IF (INIT .EQ. 0) GO TO 65
      GO TO 80
C
C
C***********************************************************************
C
C     INITIALIZATION --
C                       SET INITIALIZATION COMPLETION INDICATOR,INIT
C                       SET INDICATOR FOR TOO MANY OUTPUT POINTS,KOP
C                       EVALUATE INITIAL DERIVATIVES
C                       SET COUNTER FOR FUNCTION EVALUATIONS,NFE
C                       ESTIMATE STARTING STEPSIZE
C
   60 INIT=0
      KOP=0
C
      A=T
      CALL F(NEQN,A,Y,YP)
      NFE=1
      IF (T .NE. TOUT) GO TO 65
      IFLAG=2
      RETURN
C
C
   65 INIT=1
      H=ABS(DT)
      TOLN=0.
      DO 70 K=1,NEQN
        TOL=RELERR*ABS(Y(K))+ABSERR
        IF (TOL .LE. 0.) GO TO 70
        TOLN=TOL
        YPK=ABS(YP(K))
        IF (YPK*H**5 .GT. TOL) H=(TOL/YPK)**0.2
   70 CONTINUE
      IF (TOLN .LE. 0.) H=0.
      H=AMAX1(H,U26*AMAX1(ABS(T),ABS(DT)))
      JFLAG=ISIGN(2,IFLAG)
C
C
C***********************************************************************
C
C     SET STEPSIZE FOR INTEGRATION IN THE DIRECTION FROM T TO TOUT
C
   80 H=SIGN(H,DT)
C
C     TEST TO SEE IF RKF45 IS BEING SEVERELY IMPACTED BY TOO MANY
C     OUTPUT POINTS
C
      IF (ABS(H) .GE. 2.*ABS(DT)) KOP=KOP+1
      IF (KOP .NE. 100) GO TO 85
C
C     UNNECESSARY FREQUENCY OF OUTPUT
      KOP=0
      IFLAG=7
      RETURN
C
   85 IF (ABS(DT) .GT. U26*ABS(T)) GO TO 95
C
C     IF TOO CLOSE TO OUTPUT POINT,EXTRAPOLATE AND RETURN
C
      DO 90 K=1,NEQN
   90   Y(K)=Y(K)+DT*YP(K)
      A=TOUT
      CALL F(NEQN,A,Y,YP)
      NFE=NFE+1
      GO TO 300
C
C
C     INITIALIZE OUTPUT POINT INDICATOR
C
   95 OUTPUT= .FALSE.
C
C     TO AVOID PREMATURE UNDERFLOW IN THE ERROR TOLERANCE FUNCTION,
C     SCALE THE ERROR TOLERANCES
C
      SCALE=2./RELERR
      AE=SCALE*ABSERR
C
C
C***********************************************************************
C***********************************************************************
C     STEP BY STEP INTEGRATION
C
  100 HFAILD= .FALSE.
C
C     SET SMALLEST ALLOWABLE STEPSIZE
C
      HMIN=U26*ABS(T)
C
C     ADJUST STEPSIZE IF NECESSARY TO HIT THE OUTPUT POINT.
C     LOOK AHEAD TWO STEPS TO AVOID DRASTIC CHANGES IN THE STEPSIZE AND
C     THUS LESSEN THE IMPACT OF OUTPUT POINTS ON THE CODE.
C
      DT=TOUT-T
      IF (ABS(DT) .GE. 2.*ABS(H)) GO TO 200
      IF (ABS(DT) .GT. ABS(H)/0.9) GO TO 150
C
C     THE NEXT SUCCESSFUL STEP WILL COMPLETE THE INTEGRATION TO THE
C     OUTPUT POINT
C
      OUTPUT= .TRUE.
      H=DT
      GO TO 200
C
  150 H=0.5*DT
C
C
C
C***********************************************************************
C     CORE INTEGRATOR FOR TAKING A SINGLE STEP
C***********************************************************************
C     THE TOLERANCES HAVE BEEN SCALED TO AVOID PREMATURE UNDERFLOW IN
C     COMPUTING THE ERROR TOLERANCE FUNCTION ET.
C     TO AVOID PROBLEMS WITH ZERO CROSSINGS,RELATIVE ERROR IS MEASURED
C     USING THE AVERAGE OF THE MAGNITUDES OF THE SOLUTION AT THE
C     BEGINNING AND END OF A STEP.
C     THE ERROR ESTIMATE FORMULA HAS BEEN GROUPED TO CONTROL LOSS OF
C     SIGNIFICANCE.
C     TO DISTINGUISH THE VARIOUS ARGUMENTS, H IS NOT PERMITTED
C     TO BECOME SMALLER THAN 26 UNITS OF ROUNDOFF IN T.
C     PRACTICAL LIMITS ON THE CHANGE IN THE STEPSIZE ARE ENFORCED TO
C     SMOOTH THE STEPSIZE SELECTION PROCESS AND TO AVOID EXCESSIVE
C     CHATTERING ON PROBLEMS HAVING DISCONTINUITIES.
C     TO PREVENT UNNECESSARY FAILURES, THE CODE USES 9/10 THE STEPSIZE
C     IT ESTIMATES WILL SUCCEED.
C     AFTER A STEP FAILURE, THE STEPSIZE IS NOT ALLOWED TO INCREASE FOR
C     THE NEXT ATTEMPTED STEP. THIS MAKES THE CODE MORE EFFICIENT ON
C     PROBLEMS HAVING DISCONTINUITIES AND MORE EFFECTIVE IN GENERAL
C     SINCE LOCAL EXTRAPOLATION IS BEING USED AND EXTRA CAUTION SEEMS
C     WARRANTED.
C***********************************************************************
C
C
C     TEST NUMBER OF DERIVATIVE FUNCTION EVALUATIONS.
C     IF OKAY,TRY TO ADVANCE THE INTEGRATION FROM T TO T+H
C
  200 IF (NFE .LE. MAXNFE) GO TO 220
C
C     TOO MUCH WORK
      IFLAG=4
      KFLAG=4
      RETURN
C
C     ADVANCE AN APPROXIMATE SOLUTION OVER ONE STEP OF LENGTH H
C
  220 CALL FEHL(F,NEQN,Y,T,H,YP,F1,F2,F3,F4,F5,F1)
      NFE=NFE+5
C
C     COMPUTE AND TEST ALLOWABLE TOLERANCES VERSUS LOCAL ERROR ESTIMATES
C     AND REMOVE SCALING OF TOLERANCES. NOTE THAT RELATIVE ERROR IS
C     MEASURED WITH RESPECT TO THE AVERAGE OF THE MAGNITUDES OF THE
C     SOLUTION AT THE BEGINNING AND END OF THE STEP.
C
      EEOET=0.
      DO 250 K=1,NEQN
        ET=ABS(Y(K))+ABS(F1(K))+AE
        IF (ET .GT. 0.) GO TO 240
C
C       INAPPROPRIATE ERROR TOLERANCE
        IFLAG=5
        KFLAG=5
        RETURN
C
  240   EE=ABS((-2090.*YP(K)+(21970.*F3(K)-15048.*F4(K)))+
     1                        (22528.*F2(K)-27360.*F5(K)))
  250   EEOET=AMAX1(EEOET,EE/ET)
C
      ESTTOL=ABS(H)*EEOET*SCALE/752400.
C
      IF (ESTTOL .LE. 1.) GO TO 260
C
C
C     UNSUCCESSFUL STEP
C                       REDUCE THE STEPSIZE , TRY AGAIN
C                       THE DECREASE IS LIMITED TO A FACTOR OF 1/10
C
      HFAILD= .TRUE.
      OUTPUT= .FALSE.
      S=0.1
      IF (ESTTOL .LT. 59049.) S=0.9/ESTTOL**0.2
      H=S*H
      IF (ABS(H) .GT. HMIN) GO TO 200
C
C     REQUESTED ERROR UNATTAINABLE AT SMALLEST ALLOWABLE STEPSIZE
      IFLAG=6
      KFLAG=6
      RETURN
C
C
C     SUCCESSFUL STEP
C                        STORE SOLUTION AT T+H
C                        AND EVALUATE DERIVATIVES THERE
C
  260 T=T+H
      DO 270 K=1,NEQN
  270   Y(K)=F1(K)
      A=T
      CALL F(NEQN,A,Y,YP)
      NFE=NFE+1
C
C
C                       CHOOSE NEXT STEPSIZE
C                       THE INCREASE IS LIMITED TO A FACTOR OF 5
C                       IF STEP FAILURE HAS JUST OCCURRED, NEXT
C                          STEPSIZE IS NOT ALLOWED TO INCREASE
C
      S=5.
      IF (ESTTOL .GT. 1.889568E-4) S=0.9/ESTTOL**0.2
      IF (HFAILD) S=AMIN1(S,1.)
      H=SIGN(AMAX1(S*ABS(H),HMIN),H)
C
C***********************************************************************
C     END OF CORE INTEGRATOR
C***********************************************************************
C
C
C
C     SHOULD WE TAKE ANOTHER STEP
C
      IF (OUTPUT) GO TO 300
      IF (IFLAG .GT. 0) GO TO 100
C
C***********************************************************************
C***********************************************************************
C
C
C     INTEGRATION SUCCESSFULLY COMPLETED
C
C     ONE-STEP MODE
      IFLAG=-2
      RETURN
C
C     INTERVAL MODE
  300 T=TOUT
      IFLAG=2
      RETURN
C
      END
      SUBROUTINE FEHL(F,NEQN,Y,T,H,YP,F1,F2,F3,F4,F5,S)
C
C     FEHLBERG FOURTH-FIFTH ORDER RUNGE-KUTTA METHOD
C
C***********************************************************************
C     FEHL INTEGRATES A SYSTEM OF NEQN FIRST ORDER
C    ORDINARY DIFFERENTIAL EQUATIONS OF THE FORM
C             DY(I)/DT=F(NEQN,T,Y(1),---,Y(NEQN))
C    WHERE THE INITIAL VALUES Y(I) AND THE INITIAL DERIVATIVES
C    YP(I) ARE SPECIFIED AT THE STARTING POINT T.  FEHL ADVANCES
C    THE SOLUTION OVER THE FIXED STEP H AND RETURNS
C    THE FIFTH ORDER (SIXTH ORDER ACCURATE LOCALLY) SOLUTION
C    APPROXIMATION AT T+H IN ARRAY S(I).
C    F1,---,F5 ARE ARRAYS OF DIMENSION NEQN WHICH ARE NEEDED
C    FOR INTERNAL STORAGE.
C    THE FORMULAS HAVE BEEN GROUPED TO CONTROL LOSS OF SIGNIFICANCE.
C    FEHL SHOULD BE CALLED WITH AN H NOT SMALLER THAN 13 UNITS OF
C    ROUNDOFF IN T SO THAT THE VARIOUS INDEPENDENT ARGUMENTS CAN BE
C    DISTINGUISHED.
C***********************************************************************
C
C
      DIMENSION Y(NEQN),YP(NEQN),F1(NEQN),F2(NEQN),F3(NEQN),F4(NEQN),
     1          F5(NEQN),S(NEQN)
C
      CH=.25*H
      DO 221 K=1,NEQN
  221   F5(K)=Y(K)+CH*YP(K)
      CALL F(NEQN,T+CH,F5,F1)
C
      CH=3.*H/32.
      DO 222 K=1,NEQN
  222   F5(K)=Y(K)+CH*(YP(K)+3.*F1(K))
      CALL F(NEQN,T+.375*H,F5,F2)
C
      CH=H/2197.
      DO 223 K=1,NEQN
  223   F5(K)=Y(K)+CH*(1932.*YP(K)+(7296.*F2(K)-7200.*F1(K)))
      CALL F(NEQN,T+12.*H/13.,F5,F3)
C
      CH=H/4104.
      DO 224 K=1,NEQN
  224   F5(K)=Y(K)+CH*((8341.*YP(K)-845.*F3(K))+
     1                            (29440.*F2(K)-32832.*F1(K)))
      CALL F(NEQN,T+H,F5,F4)
C
      CH=H/20520.
      DO 225 K=1,NEQN
  225   F1(K)=Y(K)+CH*((-6080.*YP(K)+(9295.*F3(K)-5643.*F4(K)))+
     1                             (41040.*F1(K)-28352.*F2(K)))
      CALL F(NEQN,T+.5*H,F1,F5)
C
C     COMPUTE APPROXIMATE SOLUTION AT T+H
C
      CH=H/7618050.
      DO 230 K=1,NEQN
  230   S(K)=Y(K)+CH*((902880.*YP(K)+(3855735.*F3(K)-1371249.*F4(K)))+
     1                (3953664.*F2(K)+277020.*F5(K)))
C
      RETURN
      END
      SUBROUTINE CHECK(M,KCOMP,TIME,DELTIM,Q,SRATE,TGAS,PGAS,DEPSIT,
     $DIAM,TGAS1,TGAS2,PGAS1,PGAS2,ROUND,IPRNT,IFLAG,NEWCOF)
      DIMENSION Q(160),SRATE(160),DEPSIT(3,8),DIAM(21),V(21)
C
      ISTOP=0
C
      IF(M.GE.5.AND.M.LE.20)GO TO 1
      ISTOP=1
      WRITE(IPRNT,2)
    2 FORMAT(' --NUMBER OF SECTIONS MUST BE FROM 5 TO 20')
C
    1 IF(M.LE.50)GO TO 29
      ISTOP=1
      WRITE(IPRNT,30)
   30 FORMAT(' --MAXIMUM NUMBER OF SECTIONS FOR PLOTTING IS 50')
C
   29 IF(KCOMP.GE.1.AND.KCOMP.LE.8)GO TO 3
      ISTOP=1
      WRITE(IPRNT,4)
    4 FORMAT(' --NUMBER OF COMPONENTS MUST BE FROM 1 TO 8')
C
    3 IF(DELTIM.GT.0.)GO TO 5
      ISTOP=1
      WRITE(IPRNT,6)
    6 FORMAT(' --TIME STEP MUST BE POSITIVE')
C
    5 IF(TGAS1.LT.TGAS2)GO TO 7
      ISTOP=1
      WRITE(IPRNT,8)
    8 FORMAT(' --TEMPERATURE RANGE MUST BE POSITIVE')
C
    7 IF(PGAS1.LT.PGAS2)GO TO 9
      ISTOP=1
      WRITE(IPRNT,10)
   10 FORMAT(' --PRESSURE RANGE MUST BE POSITIVE')
C
    9 IF(ROUND.LT.1.0)GO TO 11
      ISTOP=1
      WRITE(IPRNT,12)
   12 FORMAT(' --ROUNDOFF ERROR MUST BE LESS THAN ONE')
C
   11 IF(IFLAG.EQ.1.OR.IFLAG.EQ.2.OR.IFLAG.EQ.-1)GO TO 13
      ISTOP=1
      WRITE(IPRNT,14)
   14 FORMAT(' --IFLAG TO MAEROS MUST BE -1,1 OR 2')
C
   13 IF(IABS(NEWCOF).LE.15)GO TO 15
      ISTOP=1
       WRITE(IPRNT,16)
   16 FORMAT(' --INVALID NEWCOF TO MAEROS')
C
   15 DO 17 I=1,M
      IF(DIAM(I).GT.0.)GO TO 18
      ISTOP=1
      WRITE(IPRNT,19)I
   19 FORMAT(' --PARTICLE DIAMETER AT LOWER BOUNDARY OF SECTION',I4,
     $' MUST BE POSITIVE')
   18 IF(DIAM(I).LT.DIAM(I+1))GO TO 17
      ISTOP=1
      WRITE(IPRNT,20)
   20 FORMAT(' --PARTICLE DIAMETERS MUST BE IN ASCENDING ORDER')
   17 CONTINUE
C
      MP1=M+1
      DO 21 I=1,MP1
      V(I)=0.
   21 CALL RHODD(V(I),DIAM(I),RHO)
C
      DO 22 I=1,M
      IF(V(I+1).GE.2.*V(I))GO TO 22
      ISTOP=1
      WRITE(IPRNT,27)I
   27 FORMAT(' --PARTICLE DIAMETER NUMBER',I4,
     $ ' DOES NOT SATISFY THE GEOMETRIC CONSTRAINT')
   22 CONTINUE
C
      X=LOG(V(1))
      Y=LOG(V(MP1))
      F1=BETA(Y,X,TGAS,PGAS,4)
      F2=BETA(X,Y,TGAS,PGAS,4)
      IF(ABS(F1-F2)*1.E4.LT.ABS(F1))GO TO 23
      ISTOP=1
      WRITE(IPRNT,24)
   24 FORMAT(' --BETA ROUTINE IS NOT SYMMETRIC')
C
   23 IF(F1.GE.0..AND.F2.GE.0.)GO TO 25
      ISTOP=1
      WRITE(IPRNT,26)
   26 FORMAT(' --BETA ROUTINE IS NOT POSITIVE')
C
   25 IF(ISTOP.EQ.0)RETURN
      WRITE(IPRNT,28)
   28 FORMAT(' --EXECUTION TERMINATED DUE IN INVALID INPUT TO MAEROS')
      STOP
      END
C     ******************************************************************
      FUNCTION DEPOST(X,DUMMY,TGAS,PGAS,NBTYPE)
C
C     THIS ROUTINE CALCULATES THE DEPOSITION COEFFICIENTS DUE TO
C     GRAVITY, DIFFUSION AND THERMOPHORESIS.  THE COEFFICIENT
C     IS GIVEN FOR THE CEILING, VERTICAL WALLS AND FLOOR, FOR
C     NBTYPE = 7,8 AND 9, RESPECTIVELY.
C     REFERENCES:  GIESEKE,J.A., LEE,K.W. AND REED,L.D. 'HAARM-3
C     USERS MANUAL,' BMI-NUREG-1991 (1978), BROCK, J.R. 'ON THE
C     THEORY OF THERMAL FORCES ACTING ON AEROSOL PARTICLES,' J.
C     COLLOID INTERFACE SCIENCE, VOL.17, 768 (1962)
C
      COMMON/PHYSPT/ACELOV,AFLROV,AWALOV,CHI,DELDIF,DELSAT,DENSTY,FSLIP,
     $FTHERM,GAMMA,PSAT,STICK,TGRADC,TGRADF,TGRADW,TKGOP,TURBDS,VOLUME,
     $WTCONM,WTMOL
      COMMON/FLAG/IFGGRAV,IFGTURB,IFGDPST
C
      IF(IFGDPST.EQ.0)THEN
      DEPOST=0.
      RETURN
      ENDIF
C
      V=EXP(X)
      D=0.
      CALL RHODD(V,D,RHO)
C
C       DETERMINE THE PHYSICAL PROPERTIES OF AIR, (VISCOSITY,
C       DENSITY AND MEAN FREE PATH)
C
      VISCOS=.003661*TGAS
      VISCOS=.0066164*VISCOS*SQRT(VISCOS)/(TGAS+114.)
      DENAIR=1.21E-4*PGAS*WTMOL/TGAS
      FREEMN=VISCOS/DENAIR*SQRT(1.89E-4*WTMOL/TGAS)
C
      FCHI=CHI
      AKN=2.*FREEMN/D
      BMOBIL=1.+AKN*(FSLIP+.4*EXP(-1.1/AKN))
      VTERM=.544*RHO*D*D*BMOBIL/VISCOS
      DIF=1.46E-24*TGAS*BMOBIL/(VISCOS*FCHI*D)
      TGRAD=TGRADC
      IF(NBTYPE.EQ.8)TGRAD=TGRADW
      IF(NBTYPE.EQ.9)TGRAD=TGRADF
      VTHRML=1.5*VISCOS*BMOBIL*(FTHERM*AKN+TKGOP)*TGRAD/(FCHI*DENAIR*
     $  TGAS*(1.+3.*FSLIP*AKN)*(1.+2.*(FTHERM*AKN+TKGOP)))
      DIF=DIF/DELDIF
      IF(NBTYPE.EQ.7)DEPOST=ACELOV*AMAX1(0.,DIF-VTERM+VTHRML)
      IF(NBTYPE.EQ.8)DEPOST=AWALOV*AMAX1(0.,DIF+VTHRML)
      IF(NBTYPE.EQ.9)DEPOST=AFLROV*AMAX1(0.,DIF+VTHRML+VTERM)
      RETURN
      END
      SUBROUTINE RHODD(V,D,RHO)
C
C     THIS ROUTINE CALCULATES THE MATERIAL DENSITY (IN KG/M**3).
C     THE USER MAY SUPPLY THE PARTICLE MASS (I.E. V)
C     OR THE PARTICLE DIAMETER (I.E. D) AND THE ROUTINE WILL
C     CALCULATE THE OTHER VARIABLE.
C
      COMMON/PHYSPT/ACELOV,AFLROV,AWALOV,CHI,DELDIF,DELSAT,DENSTY,FSLIP,
     $FTHERM,GAMMA,PSAT,STICK,TGRADC,TGRADF,TGRADW,TKGOP,TURBDS,VOLUME,
     $WTCONM,WTMOL
C
      RHO=DENSTY
      IF(V.LE.0.)GO TO 1
      D=(6.*V/(3.141592654*RHO))**(.333333333)
      RETURN
    1 V=.5235987757*D*D*D*RHO
      RETURN
      END
